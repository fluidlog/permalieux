/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var SparqlParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,12,15,28,41,50,55,107,117,120,122,123,132,133,138,322,323,324,325,326],$V1=[2,210],$V2=[107,117,120,122,123,132,133,138,322,323,324,325,326],$V3=[1,20],$V4=[1,29],$V5=[6,90],$V6=[45,46,58],$V7=[45,58],$V8=[1,58],$V9=[1,60],$Va=[1,56],$Vb=[1,59],$Vc=[1,65],$Vd=[1,66],$Ve=[26,34,35],$Vf=[13,16,312],$Vg=[119,141,320,327],$Vh=[13,16,119,141,312],$Vi=[1,88],$Vj=[1,92],$Vk=[1,94],$Vl=[119,141,320,321,327],$Vm=[13,16,119,141,312,321],$Vn=[1,100],$Vo=[2,252],$Vp=[1,99],$Vq=[13,16,34,35,87,93,226,231,245,246,299,300,301,302,303,304,305,306,307,308,309,310,311,312],$Vr=[6,45,46,58,68,75,78,86,88,90],$Vs=[6,13,16,34,45,46,58,68,75,78,86,88,90,312],$Vt=[6,13,16,26,34,35,37,38,45,46,48,58,68,75,78,86,87,88,90,93,100,116,119,132,133,135,140,167,168,170,173,174,191,195,219,224,226,227,231,235,245,246,250,254,258,271,273,278,295,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328,330,331,333,334,335,336,337,338,339],$Vu=[34,35,45,46,58],$Vv=[1,131],$Vw=[1,132],$Vx=[1,143],$Vy=[1,123],$Vz=[1,117],$VA=[1,122],$VB=[1,124],$VC=[1,134],$VD=[1,135],$VE=[1,136],$VF=[1,137],$VG=[1,139],$VH=[1,140],$VI=[2,460],$VJ=[1,149],$VK=[1,150],$VL=[1,151],$VM=[1,144],$VN=[1,145],$VO=[1,148],$VP=[1,158],$VQ=[1,159],$VR=[1,160],$VS=[1,161],$VT=[1,162],$VU=[1,163],$VV=[1,164],$VW=[1,165],$VX=[1,166],$VY=[1,167],$VZ=[1,157],$V_=[1,152],$V$=[1,153],$V01=[1,154],$V11=[1,155],$V21=[1,156],$V31=[6,13,16,34,35,46,48,87,90,93,119,167,168,170,173,174,226,231,245,246,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328],$V41=[2,311],$V51=[1,184],$V61=[1,182],$V71=[6,191],$V81=[2,328],$V91=[2,316],$Va1=[45,135],$Vb1=[6,48,78,86,88,90],$Vc1=[2,256],$Vd1=[1,198],$Ve1=[1,200],$Vf1=[6,48,75,78,86,88,90],$Vg1=[2,254],$Vh1=[1,206],$Vi1=[1,218],$Vj1=[1,216],$Vk1=[1,224],$Vl1=[1,217],$Vm1=[1,222],$Vn1=[1,223],$Vo1=[6,68,75,78,86,88,90],$Vp1=[37,38,191,250,278],$Vq1=[37,38,191,250,254,278],$Vr1=[37,38,191,250,254,258,271,273,278,295,306,307,308,309,310,311,334,335,336,337,338,339],$Vs1=[26,37,38,191,250,254,258,271,273,278,295,306,307,308,309,310,311,331,334,335,336,337,338,339],$Vt1=[1,252],$Vu1=[1,251],$Vv1=[6,13,16,26,34,35,37,38,46,48,75,78,81,83,86,87,88,90,93,119,167,168,170,173,174,191,226,231,245,246,250,254,258,271,273,275,276,277,278,279,281,282,284,285,288,290,295,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328,331,334,335,336,337,338,339,340,341,342,343,344],$Vw1=[1,260],$Vx1=[1,259],$Vy1=[13,16,26,34,35,37,38,46,48,87,90,93,100,119,167,168,170,173,174,191,195,219,224,226,227,231,235,245,246,250,254,258,271,273,278,295,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328,331,334,335,336,337,338,339],$Vz1=[35,93],$VA1=[13,16,26,34,35,37,38,46,48,87,90,93,100,119,167,168,170,173,174,191,195,219,224,226,227,231,235,245,246,250,254,258,271,273,278,295,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328,331,334,335,336,337,338,339],$VB1=[13,16,48,87,100,231,299,300,301,302,303,304,305,306,307,308,309,310,311,312],$VC1=[48,93],$VD1=[34,38],$VE1=[6,116,191],$VF1=[48,119],$VG1=[6,48,86,88,90],$VH1=[2,340],$VI1=[2,332],$VJ1=[1,312],$VK1=[1,314],$VL1=[48,119,328],$VM1=[13,16,34,195,312],$VN1=[13,16,34,35,38,46,48,87,90,93,119,167,168,170,173,174,191,195,219,224,226,227,231,235,245,246,278,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328],$VO1=[13,16,34,35,87,219,271,273,275,276,277,279,281,282,284,285,288,290,299,300,301,302,303,304,305,306,307,308,309,310,311,312,339,340,341,342,343,344],$VP1=[1,346],$VQ1=[1,347],$VR1=[13,16,26,34,35,87,219,271,273,275,276,277,279,281,282,284,285,288,290,299,300,301,302,303,304,305,306,307,308,309,310,311,312,339,340,341,342,343,344],$VS1=[1,370],$VT1=[1,371],$VU1=[1,384],$VV1=[6,48,90],$VW1=[6,13,16,35,48,78,86,88,90,275,276,277,279,281,282,284,285,288,290,312,339,340,341,342,343,344],$VX1=[6,13,16,34,35,46,48,78,81,83,86,87,88,90,93,119,167,168,170,173,174,226,231,245,246,275,276,277,279,281,282,284,285,288,290,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328,339,340,341,342,343,344],$VY1=[46,48,90,119,167,168,170,173,174],$VZ1=[1,403],$V_1=[1,404],$V$1=[1,410],$V02=[1,409],$V12=[48,119,191,227,328],$V22=[13,16,34,35,38,87,93,226,231,245,246,299,300,301,302,303,304,305,306,307,308,309,310,311,312],$V32=[13,16,34,35,38,48,87,93,119,191,226,227,231,245,246,278,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328],$V42=[13,16,38,48,87,100,231,299,300,301,302,303,304,305,306,307,308,309,310,311,312],$V52=[35,48],$V62=[2,331],$V72=[1,463],$V82=[1,460],$V92=[1,461],$Va2=[6,13,16,26,34,35,37,38,46,48,68,75,78,81,83,86,87,88,90,93,119,167,168,170,173,174,191,226,231,245,246,250,254,258,271,273,275,276,277,278,279,281,282,284,285,288,290,295,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328,329,331,334,335,336,337,338,339,340,341,342,343,344],$Vb2=[13,16,35,195,219,224,312],$Vc2=[2,388],$Vd2=[1,481],$Ve2=[46,48,90,119,167,168,170,173,174,328],$Vf2=[13,16,34,35,195,219,224,312],$Vg2=[6,13,16,34,35,48,75,78,86,88,90,275,276,277,279,281,282,284,285,288,290,312,339,340,341,342,343,344],$Vh2=[13,16,34,35,38,48,87,93,119,191,195,226,227,231,245,246,278,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328],$Vi2=[6,13,16,34,35,48,81,83,86,88,90,275,276,277,279,281,282,284,285,288,290,312,339,340,341,342,343,344],$Vj2=[13,16,34,35,46,48,87,90,93,119,167,168,170,173,174,226,231,245,246,299,300,301,302,303,304,305,306,307,308,309,310,311,312],$Vk2=[13,16,34,312],$Vl2=[13,16,34,35,46,48,87,90,93,119,167,168,170,173,174,226,231,245,246,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328],$Vm2=[2,343],$Vn2=[13,16,34,35,38,46,48,87,90,93,119,167,168,170,173,174,191,226,227,231,245,246,278,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328],$Vo2=[13,16,34,35,37,38,46,48,87,90,93,119,167,168,170,173,174,191,195,219,224,226,227,231,235,245,246,278,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328],$Vp2=[2,338],$Vq2=[13,16,35,195,219,312],$Vr2=[13,16,34,35,38,46,48,87,90,93,119,167,168,170,173,174,191,195,219,224,226,227,231,245,246,278,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328],$Vs2=[13,16,38,87,100,231,299,300,301,302,303,304,305,306,307,308,309,310,311,312],$Vt2=[46,48,90,119,167,168,170,173,174,191,227,328],$Vu2=[13,16,34,38,48,87,100,195,231,235,299,300,301,302,303,304,305,306,307,308,309,310,311,312],$Vv2=[13,16,34,35,48,87,93,119,226,231,245,246,299,300,301,302,303,304,305,306,307,308,309,310,311,312],$Vw2=[13,16,34,35,38,87,93,226,231,245,246,299,300,301,302,303,304,305,306,307,308,309,310,311,312,330,331],$Vx2=[13,16,26,34,35,38,87,93,226,231,245,246,271,299,300,301,302,303,304,305,306,307,308,309,310,311,312,330,331,333],$Vy2=[1,632],$Vz2=[1,633],$VA2=[2,326],$VB2=[13,16,38,195,224,312];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"QueryOrUpdate":3,"Prologue":4,"QueryOrUpdate_group0":5,"EOF":6,"Prologue_repetition0":7,"Query":8,"Query_group0":9,"Query_option0":10,"BaseDecl":11,"BASE":12,"IRIREF":13,"PrefixDecl":14,"PREFIX":15,"PNAME_NS":16,"SelectQuery":17,"SelectClauseWildcard":18,"SelectQuery_repetition0":19,"WhereClause":20,"SolutionModifierNoGroup":21,"SelectClauseVars":22,"SelectQuery_repetition1":23,"SolutionModifier":24,"SelectClauseBase":25,"*":26,"SelectClauseVars_repetition_plus0":27,"SELECT":28,"SelectClauseBase_option0":29,"SubSelect":30,"SubSelect_option0":31,"SubSelect_option1":32,"SelectClauseItem":33,"VAR":34,"(":35,"Expression":36,"AS":37,")":38,"VarTriple":39,"ConstructQuery":40,"CONSTRUCT":41,"ConstructTemplate":42,"ConstructQuery_repetition0":43,"ConstructQuery_repetition1":44,"WHERE":45,"{":46,"ConstructQuery_option0":47,"}":48,"DescribeQuery":49,"DESCRIBE":50,"DescribeQuery_group0":51,"DescribeQuery_repetition0":52,"DescribeQuery_option0":53,"AskQuery":54,"ASK":55,"AskQuery_repetition0":56,"DatasetClause":57,"FROM":58,"DatasetClause_option0":59,"iri":60,"WhereClause_option0":61,"GroupGraphPattern":62,"SolutionModifier_option0":63,"SolutionModifierNoGroup_option0":64,"SolutionModifierNoGroup_option1":65,"SolutionModifierNoGroup_option2":66,"GroupClause":67,"GROUP":68,"BY":69,"GroupClause_repetition_plus0":70,"GroupCondition":71,"BuiltInCall":72,"FunctionCall":73,"HavingClause":74,"HAVING":75,"HavingClause_repetition_plus0":76,"OrderClause":77,"ORDER":78,"OrderClause_repetition_plus0":79,"OrderCondition":80,"ASC":81,"BrackettedExpression":82,"DESC":83,"Constraint":84,"LimitOffsetClauses":85,"LIMIT":86,"INTEGER":87,"OFFSET":88,"ValuesClause":89,"VALUES":90,"InlineData":91,"InlineData_repetition0":92,"NIL":93,"InlineData_repetition1":94,"InlineData_repetition_plus2":95,"InlineData_repetition3":96,"DataBlockValue":97,"Literal":98,"ConstTriple":99,"UNDEF":100,"DataBlockValueList":101,"DataBlockValueList_repetition_plus0":102,"Update":103,"Update_repetition0":104,"Update1":105,"Update_option0":106,"LOAD":107,"Update1_option0":108,"Update1_option1":109,"Update1_group0":110,"Update1_option2":111,"GraphRefAll":112,"Update1_group1":113,"Update1_option3":114,"GraphOrDefault":115,"TO":116,"CREATE":117,"Update1_option4":118,"GRAPH":119,"INSERTDATA":120,"QuadPattern":121,"DELETEDATA":122,"DELETEWHERE":123,"Update1_option5":124,"InsertClause":125,"Update1_option6":126,"Update1_repetition0":127,"Update1_option7":128,"DeleteClause":129,"Update1_option8":130,"Update1_repetition1":131,"DELETE":132,"INSERT":133,"UsingClause":134,"USING":135,"UsingClause_option0":136,"WithClause":137,"WITH":138,"IntoGraphClause":139,"INTO":140,"DEFAULT":141,"GraphOrDefault_option0":142,"GraphRefAll_group0":143,"QuadPattern_option0":144,"QuadPattern_repetition0":145,"QuadsNotTriples":146,"QuadsNotTriples_group0":147,"QuadsNotTriples_option0":148,"QuadsNotTriples_option1":149,"QuadsNotTriples_option2":150,"TriplesTemplate":151,"TriplesTemplate_repetition0":152,"TriplesSameSubject":153,"TriplesTemplate_option0":154,"GroupGraphPatternSub":155,"GroupGraphPatternSub_option0":156,"GroupGraphPatternSub_repetition0":157,"GroupGraphPatternSubTail":158,"GraphPatternNotTriples":159,"GroupGraphPatternSubTail_option0":160,"GroupGraphPatternSubTail_option1":161,"TriplesBlock":162,"TriplesBlock_repetition0":163,"TriplesSameSubjectPath":164,"TriplesBlock_option0":165,"GraphPatternNotTriples_repetition0":166,"OPTIONAL":167,"MINUS":168,"GraphPatternNotTriples_group0":169,"SERVICE":170,"GraphPatternNotTriples_option0":171,"GraphPatternNotTriples_group1":172,"FILTER":173,"BIND":174,"FunctionCall_option0":175,"FunctionCall_repetition0":176,"ExpressionList":177,"ExpressionList_repetition0":178,"ConstructTemplate_option0":179,"ConstructTriples":180,"ConstructTriples_repetition0":181,"ConstructTriples_option0":182,"TriplesSameSubject_group0":183,"PropertyListNotEmpty":184,"TriplesNode":185,"PropertyList":186,"PropertyList_option0":187,"VerbObjectList":188,"PropertyListNotEmpty_repetition0":189,"SemiOptionalVerbObjectList":190,";":191,"SemiOptionalVerbObjectList_option0":192,"Verb":193,"ObjectList":194,"a":195,"ObjectList_repetition0":196,"GraphNode":197,"ObjectListPath":198,"ObjectListPath_repetition0":199,"GraphNodePath":200,"TriplesSameSubjectPath_group0":201,"PropertyListPathNotEmpty":202,"TriplesNodePath":203,"TriplesSameSubjectPath_option0":204,"PropertyListPathNotEmpty_group0":205,"PropertyListPathNotEmpty_repetition0":206,"PropertyListPathNotEmpty_repetition1":207,"PropertyListPathNotEmptyTail":208,"PropertyListPathNotEmptyTail_group0":209,"Path":210,"Path_repetition0":211,"PathSequence":212,"PathSequence_repetition0":213,"PathEltOrInverse":214,"PathElt":215,"PathPrimary":216,"PathElt_option0":217,"PathEltOrInverse_option0":218,"!":219,"PathNegatedPropertySet":220,"PathOneInPropertySet":221,"PathNegatedPropertySet_repetition0":222,"PathNegatedPropertySet_option0":223,"^":224,"TriplesNode_repetition_plus0":225,"[":226,"]":227,"TriplesNodePath_repetition_plus0":228,"GraphNode_group0":229,"GraphNodePath_group0":230,"<<":231,"VarTriple_group0":232,"VarTriple_group1":233,"VarTriple_group2":234,">>":235,"VarTriple_group3":236,"VarTriple_group4":237,"ConstTriple_group0":238,"ConstTriple_group1":239,"ConstTriple_group2":240,"ConstTriple_group3":241,"ConstTriple_group4":242,"VarOrTerm":243,"Term":244,"BLANK_NODE_LABEL":245,"ANON":246,"ConditionalAndExpression":247,"Expression_repetition0":248,"ExpressionTail":249,"||":250,"RelationalExpression":251,"ConditionalAndExpression_repetition0":252,"ConditionalAndExpressionTail":253,"&&":254,"AdditiveExpression":255,"RelationalExpression_group0":256,"RelationalExpression_option0":257,"IN":258,"MultiplicativeExpression":259,"AdditiveExpression_repetition0":260,"AdditiveExpressionTail":261,"AdditiveExpressionTail_group0":262,"NumericLiteralPositive":263,"AdditiveExpressionTail_repetition0":264,"NumericLiteralNegative":265,"AdditiveExpressionTail_repetition1":266,"UnaryExpression":267,"MultiplicativeExpression_repetition0":268,"MultiplicativeExpressionTail":269,"MultiplicativeExpressionTail_group0":270,"+":271,"PrimaryExpression":272,"-":273,"Aggregate":274,"FUNC_ARITY0":275,"FUNC_ARITY1":276,"FUNC_ARITY2":277,",":278,"IF":279,"BuiltInCall_group0":280,"BOUND":281,"BNODE":282,"BuiltInCall_option0":283,"EXISTS":284,"COUNT":285,"Aggregate_option0":286,"Aggregate_group0":287,"FUNC_AGGREGATE":288,"Aggregate_option1":289,"GROUP_CONCAT":290,"Aggregate_option2":291,"Aggregate_option3":292,"GroupConcatSeparator":293,"SEPARATOR":294,"=":295,"String":296,"LANGTAG":297,"^^":298,"DECIMAL":299,"DOUBLE":300,"BOOLEAN":301,"STRING_LITERAL1":302,"STRING_LITERAL2":303,"STRING_LITERAL_LONG1":304,"STRING_LITERAL_LONG2":305,"INTEGER_POSITIVE":306,"DECIMAL_POSITIVE":307,"DOUBLE_POSITIVE":308,"INTEGER_NEGATIVE":309,"DECIMAL_NEGATIVE":310,"DOUBLE_NEGATIVE":311,"PNAME_LN":312,"QueryOrUpdate_group0_option0":313,"Prologue_repetition0_group0":314,"SelectClauseBase_option0_group0":315,"DISTINCT":316,"REDUCED":317,"DescribeQuery_group0_repetition_plus0_group0":318,"DescribeQuery_group0_repetition_plus0":319,"NAMED":320,"SILENT":321,"CLEAR":322,"DROP":323,"ADD":324,"MOVE":325,"COPY":326,"ALL":327,".":328,"UNION":329,"|":330,"/":331,"PathElt_option0_group0":332,"?":333,"!=":334,"<":335,">":336,"<=":337,">=":338,"NOT":339,"CONCAT":340,"COALESCE":341,"SUBSTR":342,"REGEX":343,"REPLACE":344,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",12:"BASE",13:"IRIREF",15:"PREFIX",16:"PNAME_NS",26:"*",28:"SELECT",34:"VAR",35:"(",37:"AS",38:")",41:"CONSTRUCT",45:"WHERE",46:"{",48:"}",50:"DESCRIBE",55:"ASK",58:"FROM",68:"GROUP",69:"BY",75:"HAVING",78:"ORDER",81:"ASC",83:"DESC",86:"LIMIT",87:"INTEGER",88:"OFFSET",90:"VALUES",93:"NIL",100:"UNDEF",107:"LOAD",116:"TO",117:"CREATE",119:"GRAPH",120:"INSERTDATA",122:"DELETEDATA",123:"DELETEWHERE",132:"DELETE",133:"INSERT",135:"USING",138:"WITH",140:"INTO",141:"DEFAULT",167:"OPTIONAL",168:"MINUS",170:"SERVICE",173:"FILTER",174:"BIND",191:";",195:"a",219:"!",224:"^",226:"[",227:"]",231:"<<",235:">>",245:"BLANK_NODE_LABEL",246:"ANON",250:"||",254:"&&",258:"IN",271:"+",273:"-",275:"FUNC_ARITY0",276:"FUNC_ARITY1",277:"FUNC_ARITY2",278:",",279:"IF",281:"BOUND",282:"BNODE",284:"EXISTS",285:"COUNT",288:"FUNC_AGGREGATE",290:"GROUP_CONCAT",294:"SEPARATOR",295:"=",297:"LANGTAG",298:"^^",299:"DECIMAL",300:"DOUBLE",301:"BOOLEAN",302:"STRING_LITERAL1",303:"STRING_LITERAL2",304:"STRING_LITERAL_LONG1",305:"STRING_LITERAL_LONG2",306:"INTEGER_POSITIVE",307:"DECIMAL_POSITIVE",308:"DOUBLE_POSITIVE",309:"INTEGER_NEGATIVE",310:"DECIMAL_NEGATIVE",311:"DOUBLE_NEGATIVE",312:"PNAME_LN",316:"DISTINCT",317:"REDUCED",320:"NAMED",321:"SILENT",322:"CLEAR",323:"DROP",324:"ADD",325:"MOVE",326:"COPY",327:"ALL",328:".",329:"UNION",330:"|",331:"/",333:"?",334:"!=",335:"<",336:">",337:"<=",338:">=",339:"NOT",340:"CONCAT",341:"COALESCE",342:"SUBSTR",343:"REGEX",344:"REPLACE"},
productions_: [0,[3,3],[4,1],[8,2],[11,2],[14,3],[17,4],[17,4],[18,2],[22,2],[25,2],[30,4],[30,4],[33,1],[33,5],[33,5],[40,5],[40,7],[49,5],[54,4],[57,3],[20,2],[24,2],[21,3],[67,3],[71,1],[71,1],[71,3],[71,5],[71,1],[74,2],[77,3],[80,2],[80,2],[80,1],[80,1],[85,2],[85,2],[85,4],[85,4],[89,2],[91,4],[91,4],[91,6],[97,1],[97,1],[97,1],[97,1],[101,3],[103,3],[105,4],[105,3],[105,5],[105,4],[105,2],[105,2],[105,2],[105,6],[105,6],[129,2],[125,2],[134,3],[137,2],[139,3],[115,1],[115,2],[112,2],[112,1],[121,4],[146,7],[151,3],[62,3],[62,3],[155,2],[158,3],[162,3],[159,2],[159,2],[159,2],[159,3],[159,4],[159,2],[159,6],[159,6],[159,1],[84,1],[84,1],[84,1],[73,2],[73,6],[177,1],[177,4],[42,3],[180,3],[153,2],[153,2],[186,1],[184,2],[190,2],[188,2],[193,1],[193,1],[193,1],[194,2],[198,2],[164,2],[164,2],[202,4],[208,1],[208,3],[210,2],[212,2],[215,2],[214,2],[216,1],[216,1],[216,2],[216,3],[220,1],[220,1],[220,4],[221,1],[221,1],[221,2],[221,2],[185,3],[185,3],[203,3],[203,3],[197,1],[197,1],[200,1],[200,1],[39,9],[39,5],[99,9],[99,5],[243,1],[243,1],[244,1],[244,1],[244,1],[244,1],[244,1],[36,2],[249,2],[247,2],[253,2],[251,1],[251,3],[251,4],[255,2],[261,2],[261,2],[261,2],[259,2],[269,2],[267,2],[267,2],[267,2],[267,1],[272,1],[272,1],[272,1],[272,1],[272,1],[272,1],[82,3],[72,1],[72,2],[72,4],[72,6],[72,8],[72,2],[72,4],[72,2],[72,4],[72,3],[274,5],[274,5],[274,6],[293,4],[98,1],[98,2],[98,3],[98,1],[98,1],[98,1],[98,1],[98,1],[98,1],[296,1],[296,1],[296,1],[296,1],[263,1],[263,1],[263,1],[265,1],[265,1],[265,1],[60,1],[60,1],[60,1],[313,0],[313,1],[5,1],[5,1],[314,1],[314,1],[7,0],[7,2],[9,1],[9,1],[9,1],[9,1],[10,0],[10,1],[19,0],[19,2],[23,0],[23,2],[27,1],[27,2],[315,1],[315,1],[29,0],[29,1],[31,0],[31,1],[32,0],[32,1],[43,0],[43,2],[44,0],[44,2],[47,0],[47,1],[318,1],[318,1],[319,1],[319,2],[51,1],[51,1],[52,0],[52,2],[53,0],[53,1],[56,0],[56,2],[59,0],[59,1],[61,0],[61,1],[63,0],[63,1],[64,0],[64,1],[65,0],[65,1],[66,0],[66,1],[70,1],[70,2],[76,1],[76,2],[79,1],[79,2],[92,0],[92,2],[94,0],[94,2],[95,1],[95,2],[96,0],[96,2],[102,1],[102,2],[104,0],[104,4],[106,0],[106,2],[108,0],[108,1],[109,0],[109,1],[110,1],[110,1],[111,0],[111,1],[113,1],[113,1],[113,1],[114,0],[114,1],[118,0],[118,1],[124,0],[124,1],[126,0],[126,1],[127,0],[127,2],[128,0],[128,1],[130,0],[130,1],[131,0],[131,2],[136,0],[136,1],[142,0],[142,1],[143,1],[143,1],[143,1],[144,0],[144,1],[145,0],[145,2],[147,1],[147,1],[148,0],[148,1],[149,0],[149,1],[150,0],[150,1],[152,0],[152,3],[154,0],[154,1],[156,0],[156,1],[157,0],[157,2],[160,0],[160,1],[161,0],[161,1],[163,0],[163,3],[165,0],[165,1],[166,0],[166,3],[169,1],[169,1],[171,0],[171,1],[172,1],[172,1],[175,0],[175,1],[176,0],[176,3],[178,0],[178,3],[179,0],[179,1],[181,0],[181,3],[182,0],[182,1],[183,1],[183,1],[187,0],[187,1],[189,0],[189,2],[192,0],[192,1],[196,0],[196,3],[199,0],[199,3],[201,1],[201,1],[204,0],[204,1],[205,1],[205,1],[206,0],[206,3],[207,0],[207,2],[209,1],[209,1],[211,0],[211,3],[213,0],[213,3],[332,1],[332,1],[332,1],[217,0],[217,1],[218,0],[218,1],[222,0],[222,3],[223,0],[223,1],[225,1],[225,2],[228,1],[228,2],[229,1],[229,1],[230,1],[230,1],[232,1],[232,1],[233,1],[233,1],[234,1],[234,1],[236,1],[236,1],[237,1],[237,1],[238,1],[238,1],[239,1],[239,1],[240,1],[240,1],[241,1],[241,1],[242,1],[242,1],[248,0],[248,2],[252,0],[252,2],[256,1],[256,1],[256,1],[256,1],[256,1],[256,1],[257,0],[257,1],[260,0],[260,2],[262,1],[262,1],[264,0],[264,2],[266,0],[266,2],[268,0],[268,2],[270,1],[270,1],[280,1],[280,1],[280,1],[280,1],[280,1],[283,0],[283,1],[286,0],[286,1],[287,1],[287,1],[289,0],[289,1],[291,0],[291,1],[292,0],[292,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

      // Set parser options
      $$[$0-1] = $$[$0-1] || {};
      if (Parser.base)
        $$[$0-1].base = Parser.base;
      Parser.base = '';
      $$[$0-1].prefixes = Parser.prefixes;
      Parser.prefixes = null;

      // Ensure that blank nodes are not used across INSERT DATA clauses
      if ($$[$0-1].type === 'update') {
        const insertBnodesAll = {};
        for (const update of $$[$0-1].updates) {
          if (update.updateType === 'insert') {
            // Collect bnodes for current insert clause
            const insertBnodes = {};
            for (const operation of update.insert) {
              if (operation.type === 'bgp' || operation.type === 'graph') {
                for (const triple of operation.triples) {
                  if (triple.subject.termType === 'BlankNode')
                    insertBnodes[triple.subject.value] = true;
                  if (triple.predicate.termType === 'BlankNode')
                    insertBnodes[triple.predicate.value] = true;
                  if (triple.object.termType === 'BlankNode')
                    insertBnodes[triple.object.value] = true;
                }
              }
            }

            // Check if the inserting bnodes don't clash with bnodes from a previous insert clause
            for (const bnode of Object.keys(insertBnodes)) {
              if (insertBnodesAll[bnode]) {
                throw new Error('Detected reuse blank node across different INSERT DATA clauses');
              }
              insertBnodesAll[bnode] = true;
            }
          }
        }
      }

      return $$[$0-1];
    
break;
case 3:
this.$ = extend($$[$0-1], $$[$0], { type: 'query' });
break;
case 4:

      Parser.base = resolveIRI($$[$0])
    
break;
case 5:

      if (!Parser.prefixes) Parser.prefixes = {};
      $$[$0-1] = $$[$0-1].substr(0, $$[$0-1].length - 1);
      $$[$0] = resolveIRI($$[$0]);
      Parser.prefixes[$$[$0-1]] = $$[$0];
    
break;
case 6:
this.$ = extend($$[$0-3], groupDatasets($$[$0-2]), $$[$0-1], $$[$0]);
break;
case 7:

      // Check for projection of ungrouped variable
      if (!Parser.skipValidation) {
        const counts = flatten($$[$0-3].variables.map(vars => getAggregatesOfExpression(vars.expression)))
          .some(agg => agg.aggregation === "count" && !(agg.expression instanceof Wildcard));
        if (counts || $$[$0].group) {
          for (const selectVar of $$[$0-3].variables) {
            if (selectVar.termType === "Variable") {
              if (!$$[$0].group || !$$[$0].group.map(groupVar => getExpressionId(groupVar)).includes(getExpressionId(selectVar))) {
                throw Error("Projection of ungrouped variable (?" + getExpressionId(selectVar) + ")");
              }
            } else if (getAggregatesOfExpression(selectVar.expression).length === 0) {
              const usedVars = getVariablesFromExpression(selectVar.expression);
              for (const usedVar of usedVars) {
                if (!$$[$0].group || !$$[$0].group.map || !$$[$0].group.map(groupVar => getExpressionId(groupVar)).includes(getExpressionId(usedVar))) {
                  throw Error("Use of ungrouped variable in projection of operation (?" + getExpressionId(usedVar) + ")");
                }
              }
            }
          }
        }
      }
      // Check if id of each AS-selected column is not yet bound by subquery
      const subqueries = $$[$0-1].where.filter(w => w.type === "query");
      if (subqueries.length > 0) {
        const selectedVarIds = $$[$0-3].variables.filter(v => v.variable && v.variable.value).map(v => v.variable.value);
        const subqueryIds = flatten(subqueries.map(sub => sub.variables)).map(v => v.value || v.variable.value);
        for (const selectedVarId of selectedVarIds) {
          if (subqueryIds.indexOf(selectedVarId) >= 0) {
            throw Error("Target id of 'AS' (?" + selectedVarId + ") already used in subquery");
          }
        }
      }
      this.$ = extend($$[$0-3], groupDatasets($$[$0-2]), $$[$0-1], $$[$0])
    
break;
case 8:
this.$ = extend($$[$0-1], {variables: [new Wildcard()]});
break;
case 9:

      // Check if id of each selected column is different
      const selectedVarIds = $$[$0].map(v => v.value || v.variable.value);
      const duplicates = getDuplicatesInArray(selectedVarIds);
      if (duplicates.length > 0) {
        throw Error("Two or more of the resulting columns have the same name (?" + duplicates[0] + ")");
      }

      this.$ = extend($$[$0-1], { variables: $$[$0] })
    
break;
case 10:
this.$ = extend({ queryType: 'SELECT'}, $$[$0] && ($$[$0-1] = lowercase($$[$0]), $$[$0] = {}, $$[$0][$$[$0-1]] = true, $$[$0]));
break;
case 11: case 12:
this.$ = extend($$[$0-3], $$[$0-2], $$[$0-1], $$[$0], { type: 'query' });
break;
case 13: case 100: case 137: case 166:
this.$ = toVar($$[$0]);
break;
case 14: case 28:
this.$ = expression($$[$0-3], { variable: toVar($$[$0-1]) });
break;
case 15:
this.$ = ensureSparqlStar(expression($$[$0-3], { variable: toVar($$[$0-1]) }));
break;
case 16:
this.$ = extend({ queryType: 'CONSTRUCT', template: $$[$0-3] }, groupDatasets($$[$0-2]), $$[$0-1], $$[$0]);
break;
case 17:
this.$ = extend({ queryType: 'CONSTRUCT', template: $$[$0-2] = ($$[$0-2] ? $$[$0-2].triples : []) }, groupDatasets($$[$0-5]), { where: [ { type: 'bgp', triples: appendAllTo([], $$[$0-2]) } ] }, $$[$0]);
break;
case 18:
this.$ = extend({ queryType: 'DESCRIBE', variables: $$[$0-3] === '*' ? [new Wildcard()] : $$[$0-3].map(toVar) }, groupDatasets($$[$0-2]), $$[$0-1], $$[$0]);
break;
case 19:
this.$ = extend({ queryType: 'ASK' }, groupDatasets($$[$0-2]), $$[$0-1], $$[$0]);
break;
case 20: case 61:
this.$ = { iri: $$[$0], named: !!$$[$0-1] };
break;
case 21:
this.$ = { where: $$[$0].patterns };
break;
case 22:
this.$ = extend($$[$0-1], $$[$0]);
break;
case 23:
this.$ = extend($$[$0-2], $$[$0-1], $$[$0]);
break;
case 24:
this.$ = { group: $$[$0] };
break;
case 25: case 26: case 32: case 34:
this.$ = expression($$[$0]);
break;
case 27:
this.$ = expression($$[$0-1]);
break;
case 29: case 35:
this.$ = expression(toVar($$[$0]));
break;
case 30:
this.$ = { having: $$[$0] };
break;
case 31:
this.$ = { order: $$[$0] };
break;
case 33:
this.$ = expression($$[$0], { descending: true });
break;
case 36:
this.$ = { limit:  toInt($$[$0]) };
break;
case 37:
this.$ = { offset: toInt($$[$0]) };
break;
case 38:
this.$ = { limit: toInt($$[$0-2]), offset: toInt($$[$0]) };
break;
case 39:
this.$ = { limit: toInt($$[$0]), offset: toInt($$[$0-2]) };
break;
case 40:
this.$ = { type: 'values', values: $$[$0] };
break;
case 41:

      this.$ = $$[$0-1].map(function(v) { var o = {}; o[$$[$0-3]] = v; return o; })
    
break;
case 42:

      this.$ = $$[$0-1].map(function() { return {}; })
    
break;
case 43:

      var length = $$[$0-4].length;
      $$[$0-4] = $$[$0-4].map(toVar);
      this.$ = $$[$0-1].map(function (values) {
        if (values.length !== length)
          throw Error('Inconsistent VALUES length');
        var valuesObject = {};
        for(var i = 0; i<length; i++)
          valuesObject['?' + $$[$0-4][i].value] = values[i];
        return valuesObject;
      });
    
break;
case 46:
this.$ = ensureSparqlStar($$[$0]);
break;
case 47:
this.$ = undefined;
break;
case 48: case 92: case 117: case 167:
this.$ = $$[$0-1];
break;
case 49:
this.$ = { type: 'update', updates: appendTo($$[$0-2], $$[$0-1]) };
break;
case 50:
this.$ = extend({ type: 'load', silent: !!$$[$0-2], source: $$[$0-1] }, $$[$0] && { destination: $$[$0] });
break;
case 51:
this.$ = { type: lowercase($$[$0-2]), silent: !!$$[$0-1], graph: $$[$0] };
break;
case 52:
this.$ = { type: lowercase($$[$0-4]), silent: !!$$[$0-3], source: $$[$0-2], destination: $$[$0] };
break;
case 53:
this.$ = { type: 'create', silent: !!$$[$0-2], graph: { type: 'graph', name: $$[$0] } };
break;
case 54:
this.$ = { updateType: 'insert',      insert: ensureNoVariables($$[$0])                 };
break;
case 55:
this.$ = { updateType: 'delete',      delete: ensureNoBnodes(ensureNoVariables($$[$0])) };
break;
case 56:
this.$ = { updateType: 'deletewhere', delete: ensureNoBnodes($$[$0])                    };
break;
case 57:
this.$ = extend({ updateType: 'insertdelete' }, $$[$0-5], { insert: $$[$0-4] || [] }, { delete: $$[$0-3] || [] }, groupDatasets($$[$0-2], 'using'), { where: $$[$0].patterns });
break;
case 58:
this.$ = extend({ updateType: 'insertdelete' }, $$[$0-5], { delete: $$[$0-4] || [] }, { insert: $$[$0-3] || [] }, groupDatasets($$[$0-2], 'using'), { where: $$[$0].patterns });
break;
case 59:
this.$ = ensureNoBnodes($$[$0]);
break;
case 60: case 63: case 160: case 181:
this.$ = $$[$0];
break;
case 62:
this.$ = { graph: $$[$0] };
break;
case 64:
this.$ = { type: 'graph', default: true };
break;
case 65: case 66:
this.$ = { type: 'graph', name: $$[$0] };
break;
case 67:
 this.$ = {}; this.$[lowercase($$[$0])] = true; 
break;
case 68:
this.$ = $$[$0-2] ? unionAll($$[$0-1], [$$[$0-2]]) : unionAll($$[$0-1]);
break;
case 69:

      var graph = extend($$[$0-3] || { triples: [] }, { type: 'graph', name: toVar($$[$0-5]) });
      this.$ = $$[$0] ? [graph, $$[$0]] : [graph];
    
break;
case 70: case 75:
this.$ = { type: 'bgp', triples: unionAll($$[$0-2], [$$[$0-1]]) };
break;
case 71:
this.$ = { type: 'group', patterns: [ $$[$0-1] ] };
break;
case 72:

      // For every binding
      for (const binding of $$[$0-1].filter(el => el.type === "bind")) {
        const index = $$[$0-1].indexOf(binding);
        const boundVars = new Set();
        //Collect all bounded variables before the binding
        for (const el of $$[$0-1].slice(0, index)) {
          if (el.type === "group" || el.type === "bgp") {
            getBoundVarsFromGroupGraphPattern(el).forEach(boundVar => boundVars.add(boundVar));
          }
        }
        // If binding with a non-free variable, throw error
        if (boundVars.has(binding.variable.value)) {
          throw Error("Variable used to bind is already bound (?" + binding.variable.value + ")");
        }
      }
      this.$ = { type: 'group', patterns: $$[$0-1] }
    
break;
case 73:
this.$ = $$[$0-1] ? unionAll([$$[$0-1]], $$[$0]) : unionAll($$[$0]);
break;
case 74:
this.$ = $$[$0] ? [$$[$0-2], $$[$0]] : $$[$0-2];
break;
case 76:

      if ($$[$0-1].length)
        this.$ = { type: 'union', patterns: unionAll($$[$0-1].map(degroupSingle), [degroupSingle($$[$0])]) };
      else
        this.$ = $$[$0];
    
break;
case 77:
this.$ = extend($$[$0], { type: 'optional' });
break;
case 78:
this.$ = extend($$[$0], { type: 'minus' });
break;
case 79:
this.$ = extend($$[$0], { type: 'graph', name: toVar($$[$0-1]) });
break;
case 80:
this.$ = extend($$[$0], { type: 'service', name: toVar($$[$0-1]), silent: !!$$[$0-2] });
break;
case 81:
this.$ = { type: 'filter', expression: $$[$0] };
break;
case 82:
this.$ = { type: 'bind', variable: toVar($$[$0-1]), expression: $$[$0-3] };
break;
case 83:
this.$ = ensureSparqlStar({ type: 'bind', variable: toVar($$[$0-1]), expression: $$[$0-3] });
break;
case 88:
this.$ = { type: 'functionCall', function: $$[$0-1], args: [] };
break;
case 89:
this.$ = { type: 'functionCall', function: $$[$0-5], args: appendTo($$[$0-2], $$[$0-1]), distinct: !!$$[$0-3] };
break;
case 90: case 108: case 119: case 210: case 218: case 220: case 232: case 234: case 244: case 248: case 268: case 270: case 274: case 278: case 301: case 307: case 318: case 328: case 334: case 340: case 344: case 354: case 356: case 360: case 368: case 372: case 374: case 382: case 384: case 388: case 390: case 399: case 431: case 433: case 443: case 447: case 449: case 451:
this.$ = [];
break;
case 91:
this.$ = appendTo($$[$0-2], $$[$0-1]);
break;
case 93:
this.$ = unionAll($$[$0-2], [$$[$0-1]]);
break;
case 94: case 105:
this.$ = $$[$0].map(function (t) { return extend(triple($$[$0-1]), t); });
break;
case 95:
this.$ = appendAllTo($$[$0].map(function (t) { return extend(triple($$[$0-1].entity), t); }), $$[$0-1].triples) /* the subject is a blank node, possibly with more triples */;
break;
case 97:
this.$ = unionAll([$$[$0-1]], $$[$0]);
break;
case 98:
this.$ = unionAll($$[$0]);
break;
case 99:
this.$ = objectListToTriples($$[$0-1], $$[$0]);
break;
case 102: case 115: case 122:
this.$ = Parser.factory.namedNode(RDF_TYPE);
break;
case 103: case 104:
this.$ = appendTo($$[$0-1], $$[$0]);
break;
case 106:
this.$ = !$$[$0] ? $$[$0-1].triples : appendAllTo($$[$0].map(function (t) { return extend(triple($$[$0-1].entity), t); }), $$[$0-1].triples) /* the subject is a blank node, possibly with more triples */;
break;
case 107:
this.$ = objectListToTriples(toVar($$[$0-3]), appendTo($$[$0-2], $$[$0-1]), $$[$0]);
break;
case 109:
this.$ = objectListToTriples(toVar($$[$0-1]), $$[$0]);
break;
case 110:
this.$ = $$[$0-1].length ? path('|',appendTo($$[$0-1], $$[$0])) : $$[$0];
break;
case 111:
this.$ = $$[$0-1].length ? path('/', appendTo($$[$0-1], $$[$0])) : $$[$0];
break;
case 112:
this.$ = $$[$0] ? path($$[$0], [$$[$0-1]]) : $$[$0-1];
break;
case 113:
this.$ = $$[$0-1] ? path($$[$0-1], [$$[$0]]) : $$[$0];;
break;
case 116: case 123:
this.$ = path($$[$0-1], [$$[$0]]);
break;
case 120:
this.$ = path('|', appendTo($$[$0-2], $$[$0-1]));
break;
case 124:
this.$ = path($$[$0-1], [Parser.factory.namedNode(RDF_TYPE)]);
break;
case 125: case 127:
this.$ = createList($$[$0-1]);
break;
case 126: case 128:
this.$ = createAnonymousObject($$[$0-1]);
break;
case 129:
this.$ = { entity: $$[$0], triples: [] } /* for consistency with TriplesNode */;
break;
case 131:
this.$ = { entity: $$[$0], triples: [] } /* for consistency with TriplesNodePath */;
break;
case 133: case 135:
this.$ = ensureSparqlStar(Parser.factory.quad($$[$0-4], $$[$0-3], $$[$0-2], toVar($$[$0-6])));
break;
case 134: case 136:
this.$ = ensureSparqlStar(Parser.factory.quad($$[$0-3], $$[$0-2], $$[$0-1]));
break;
case 141:
this.$ = blank($$[$0].replace(/^(_:)/,''));;
break;
case 142:
this.$ = blank();
break;
case 143:
this.$ = Parser.factory.namedNode(RDF_NIL);
break;
case 144: case 146: case 151: case 155:
this.$ = createOperationTree($$[$0-1], $$[$0]);
break;
case 145:
this.$ = ['||', $$[$0]];
break;
case 147:
this.$ = ['&&', $$[$0]];
break;
case 149:
this.$ = operation($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 150:
this.$ = operation($$[$0-2] ? 'notin' : 'in', [$$[$0-3], $$[$0]]);
break;
case 152: case 156:
this.$ = [$$[$0-1], $$[$0]];
break;
case 153:
this.$ = ['+', createOperationTree($$[$0-1], $$[$0])];
break;
case 154:

      var negatedLiteral = createTypedLiteral($$[$0-1].value.replace('-', ''), $$[$0-1].datatype);
      this.$ = ['-', createOperationTree(negatedLiteral, $$[$0])];
    
break;
case 157:
this.$ = operation('UPLUS', [$$[$0]]);
break;
case 158:
this.$ = operation($$[$0-1], [$$[$0]]);
break;
case 159:
this.$ = operation('UMINUS', [$$[$0]]);
break;
case 169:
this.$ = operation(lowercase($$[$0-1]));
break;
case 170:
this.$ = operation(lowercase($$[$0-3]), [$$[$0-1]]);
break;
case 171:
this.$ = operation(lowercase($$[$0-5]), [$$[$0-3], $$[$0-1]]);
break;
case 172:
this.$ = operation(lowercase($$[$0-7]), [$$[$0-5], $$[$0-3], $$[$0-1]]);
break;
case 173:
this.$ = operation(lowercase($$[$0-1]), $$[$0]);
break;
case 174:
this.$ = operation('bound', [toVar($$[$0-1])]);
break;
case 175:
this.$ = operation($$[$0-1], []);
break;
case 176:
this.$ = operation($$[$0-3], [$$[$0-1]]);
break;
case 177:
this.$ = operation($$[$0-2] ? 'notexists' :'exists', [degroupSingle($$[$0])]);
break;
case 178: case 179:
this.$ = expression($$[$0-1], { type: 'aggregate', aggregation: lowercase($$[$0-4]), distinct: !!$$[$0-2] });
break;
case 180:
this.$ = expression($$[$0-2], { type: 'aggregate', aggregation: lowercase($$[$0-5]), distinct: !!$$[$0-3], separator: $$[$0-1] || ' ' });
break;
case 182:
this.$ = createTypedLiteral($$[$0]);
break;
case 183:
this.$ = createLangLiteral($$[$0-1], lowercase($$[$0].substr(1)));
break;
case 184:
this.$ = createTypedLiteral($$[$0-2], $$[$0]);
break;
case 185: case 198:
this.$ = createTypedLiteral($$[$0], XSD_INTEGER);
break;
case 186: case 199:
this.$ = createTypedLiteral($$[$0], XSD_DECIMAL);
break;
case 187: case 200:
this.$ = createTypedLiteral(lowercase($$[$0]), XSD_DOUBLE);
break;
case 190:
this.$ = createTypedLiteral($$[$0].toLowerCase(), XSD_BOOLEAN);
break;
case 191: case 192:
this.$ = unescapeString($$[$0], 1);
break;
case 193: case 194:
this.$ = unescapeString($$[$0], 3);
break;
case 195:
this.$ = createTypedLiteral($$[$0].substr(1), XSD_INTEGER);
break;
case 196:
this.$ = createTypedLiteral($$[$0].substr(1), XSD_DECIMAL);
break;
case 197:
this.$ = createTypedLiteral($$[$0].substr(1).toLowerCase(), XSD_DOUBLE);
break;
case 201:
this.$ = Parser.factory.namedNode(resolveIRI($$[$0]));
break;
case 202:

      var namePos = $$[$0].indexOf(':'),
          prefix = $$[$0].substr(0, namePos),
          expansion = Parser.prefixes[prefix];
      if (!expansion) throw new Error('Unknown prefix: ' + prefix);
      var uriString = resolveIRI(expansion + $$[$0].substr(namePos + 1));
      this.$ = Parser.factory.namedNode(uriString);
    
break;
case 203:

      $$[$0] = $$[$0].substr(0, $$[$0].length - 1);
      if (!($$[$0] in Parser.prefixes)) throw new Error('Unknown prefix: ' + $$[$0]);
      var uriString = resolveIRI(Parser.prefixes[$$[$0]]);
      this.$ = Parser.factory.namedNode(uriString);
    
break;
case 211: case 219: case 221: case 223: case 233: case 235: case 241: case 245: case 249: case 263: case 265: case 267: case 269: case 271: case 273: case 275: case 277: case 302: case 308: case 319: case 335: case 369: case 385: case 404: case 406: case 432: case 434: case 444: case 448: case 450: case 452:
$$[$0-1].push($$[$0]);
break;
case 222: case 240: case 262: case 264: case 266: case 272: case 276: case 403: case 405:
this.$ = [$$[$0]];
break;
case 279:
$$[$0-3].push($$[$0-2]);
break;
case 329: case 341: case 345: case 355: case 357: case 361: case 373: case 375: case 383: case 389: case 391: case 400:
$$[$0-2].push($$[$0-1]);
break;
}
},
table: [o($V0,$V1,{3:1,4:2,7:3}),{1:[3]},o($V2,[2,278],{5:4,8:5,313:6,9:7,103:8,17:9,40:10,49:11,54:12,104:13,18:14,22:15,25:19,6:[2,204],28:$V3,41:[1,16],50:[1,17],55:[1,18]}),o([6,28,41,50,55,107,117,120,122,123,132,133,138,322,323,324,325,326],[2,2],{314:21,11:22,14:23,12:[1,24],15:[1,25]}),{6:[1,26]},{6:[2,206]},{6:[2,207]},{6:[2,216],10:27,89:28,90:$V4},{6:[2,205]},o($V5,[2,212]),o($V5,[2,213]),o($V5,[2,214]),o($V5,[2,215]),{105:30,107:[1,31],110:32,113:33,117:[1,34],120:[1,35],122:[1,36],123:[1,37],124:38,128:39,132:[2,303],133:[2,297],137:45,138:[1,46],322:[1,40],323:[1,41],324:[1,42],325:[1,43],326:[1,44]},o($V6,[2,218],{19:47}),o($V6,[2,220],{23:48}),o($V7,[2,234],{42:49,44:50,46:[1,51]}),{13:$V8,16:$V9,26:[1,54],34:$Va,51:52,60:57,312:$Vb,318:55,319:53},o($V6,[2,248],{56:61}),{26:[1,62],27:63,33:64,34:$Vc,35:$Vd},o($Ve,[2,226],{29:67,315:68,316:[1,69],317:[1,70]}),o($V0,[2,211]),o($V0,[2,208]),o($V0,[2,209]),{13:[1,71]},{16:[1,72]},{1:[2,1]},{6:[2,3]},{6:[2,217]},{34:[1,74],35:[1,76],91:73,93:[1,75]},{6:[2,280],106:77,191:[1,78]},o($Vf,[2,282],{108:79,321:[1,80]}),o($Vg,[2,288],{111:81,321:[1,82]}),o($Vh,[2,293],{114:83,321:[1,84]}),{118:85,119:[2,295],321:[1,86]},{46:$Vi,121:87},{46:$Vi,121:89},{46:$Vi,121:90},{125:91,133:$Vj},{129:93,132:$Vk},o($Vl,[2,286]),o($Vl,[2,287]),o($Vm,[2,290]),o($Vm,[2,291]),o($Vm,[2,292]),{132:[2,304],133:[2,298]},{13:$V8,16:$V9,60:95,312:$Vb},{20:96,45:$Vn,46:$Vo,57:97,58:$Vp,61:98},{20:101,45:$Vn,46:$Vo,57:102,58:$Vp,61:98},o($V6,[2,232],{43:103}),{45:[1,104],57:105,58:$Vp},o($Vq,[2,360],{179:106,180:107,181:108,48:[2,358]}),o($Vr,[2,244],{52:109}),o($Vr,[2,242],{60:57,318:110,13:$V8,16:$V9,34:$Va,312:$Vb}),o($Vr,[2,243]),o($Vs,[2,240]),o($Vs,[2,238]),o($Vs,[2,239]),o($Vt,[2,201]),o($Vt,[2,202]),o($Vt,[2,203]),{20:111,45:$Vn,46:$Vo,57:112,58:$Vp,61:98},o($V6,[2,8]),o($V6,[2,9],{33:113,34:$Vc,35:$Vd}),o($Vu,[2,222]),o($Vu,[2,13]),{13:$V8,16:$V9,34:$Vv,35:$Vw,36:114,39:115,60:128,72:127,73:129,82:126,87:$Vx,98:130,219:$Vy,231:$Vz,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:$VA,272:125,273:$VB,274:133,275:$VC,276:$VD,277:$VE,279:$VF,280:138,281:$VG,282:$VH,283:141,284:$VI,285:$VJ,288:$VK,290:$VL,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21},o($Ve,[2,10]),o($Ve,[2,227]),o($Ve,[2,224]),o($Ve,[2,225]),o($V0,[2,4]),{13:[1,168]},o($V31,[2,40]),{46:[1,169]},{46:[1,170]},{34:[1,172],95:171},{6:[2,49]},o($V0,$V1,{7:3,4:173}),{13:$V8,16:$V9,60:174,312:$Vb},o($Vf,[2,283]),{112:175,119:[1,176],141:[1,178],143:177,320:[1,179],327:[1,180]},o($Vg,[2,289]),o($Vf,$V41,{115:181,142:183,119:$V51,141:$V61}),o($Vh,[2,294]),{119:[1,185]},{119:[2,296]},o($V71,[2,54]),o($Vq,$V81,{144:186,151:187,152:188,48:$V91,119:$V91}),o($V71,[2,55]),o($V71,[2,56]),o($Va1,[2,299],{126:189,129:190,132:$Vk}),{46:$Vi,121:191},o($Va1,[2,305],{130:192,125:193,133:$Vj}),{46:$Vi,121:194},o([132,133],[2,62]),o($Vb1,$Vc1,{21:195,64:196,74:197,75:$Vd1}),o($V6,[2,219]),{46:$Ve1,62:199},o($Vf,[2,250],{59:201,320:[1,202]}),{46:[2,253]},o($Vf1,$Vg1,{24:203,63:204,67:205,68:$Vh1}),o($V6,[2,221]),{20:207,45:$Vn,46:$Vo,57:208,58:$Vp,61:98},{46:[1,209]},o($V7,[2,235]),{48:[1,210]},{48:[2,359]},{13:$V8,16:$V9,34:$Vi1,35:$Vj1,39:215,60:220,87:$Vx,93:$Vk1,98:221,153:211,183:212,185:213,226:$Vl1,231:$Vz,243:214,244:219,245:$Vm1,246:$Vn1,263:146,265:147,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb},o($Vo1,[2,246],{61:98,53:225,57:226,20:227,45:$Vn,46:$Vo,58:$Vp}),o($Vs,[2,241]),o($Vf1,$Vg1,{63:204,67:205,24:228,68:$Vh1}),o($V6,[2,249]),o($Vu,[2,223]),{37:[1,229]},{37:[1,230]},o($Vp1,[2,431],{248:231}),{13:$V8,16:$V9,34:$Vi1,39:234,60:220,87:$Vx,93:$Vk1,98:221,119:[1,232],231:$Vz,236:233,243:235,244:219,245:$Vm1,246:$Vn1,263:146,265:147,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb},o($Vq1,[2,433],{252:236}),o($Vq1,[2,148],{256:237,257:238,258:[2,441],295:[1,239],334:[1,240],335:[1,241],336:[1,242],337:[1,243],338:[1,244],339:[1,245]}),o($Vr1,[2,443],{260:246}),o($Vs1,[2,451],{268:247}),{13:$V8,16:$V9,34:$Vv,35:$Vw,60:128,72:127,73:129,82:126,87:$Vx,98:130,263:146,265:147,272:248,274:133,275:$VC,276:$VD,277:$VE,279:$VF,280:138,281:$VG,282:$VH,283:141,284:$VI,285:$VJ,288:$VK,290:$VL,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21},{13:$V8,16:$V9,34:$Vv,35:$Vw,60:128,72:127,73:129,82:126,87:$Vx,98:130,263:146,265:147,272:249,274:133,275:$VC,276:$VD,277:$VE,279:$VF,280:138,281:$VG,282:$VH,283:141,284:$VI,285:$VJ,288:$VK,290:$VL,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21},{13:$V8,16:$V9,34:$Vv,35:$Vw,60:128,72:127,73:129,82:126,87:$Vx,98:130,263:146,265:147,272:250,274:133,275:$VC,276:$VD,277:$VE,279:$VF,280:138,281:$VG,282:$VH,283:141,284:$VI,285:$VJ,288:$VK,290:$VL,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21},o($Vs1,[2,160]),o($Vs1,[2,161]),o($Vs1,[2,162]),o($Vs1,[2,163],{35:$Vt1,93:$Vu1}),o($Vs1,[2,164]),o($Vs1,[2,165]),o($Vs1,[2,166]),{13:$V8,16:$V9,34:$Vv,35:$Vw,36:253,60:128,72:127,73:129,82:126,87:$Vx,98:130,219:$Vy,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:$VA,272:125,273:$VB,274:133,275:$VC,276:$VD,277:$VE,279:$VF,280:138,281:$VG,282:$VH,283:141,284:$VI,285:$VJ,288:$VK,290:$VL,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21},o($Vv1,[2,168]),{93:[1,254]},{35:[1,255]},{35:[1,256]},{35:[1,257]},{35:$Vw1,93:$Vx1,177:258},{35:[1,261]},{35:[1,263],93:[1,262]},{284:[1,264]},o($Vy1,[2,182],{297:[1,265],298:[1,266]}),o($Vy1,[2,185]),o($Vy1,[2,186]),o($Vy1,[2,187]),o($Vy1,[2,188]),o($Vy1,[2,189]),o($Vy1,[2,190]),{35:[1,267]},{35:[1,268]},{35:[1,269]},o($Vz1,[2,455]),o($Vz1,[2,456]),o($Vz1,[2,457]),o($Vz1,[2,458]),o($Vz1,[2,459]),{284:[2,461]},o($VA1,[2,191]),o($VA1,[2,192]),o($VA1,[2,193]),o($VA1,[2,194]),o($Vy1,[2,195]),o($Vy1,[2,196]),o($Vy1,[2,197]),o($Vy1,[2,198]),o($Vy1,[2,199]),o($Vy1,[2,200]),o($V0,[2,5]),o($VB1,[2,268],{92:270}),o($VC1,[2,270],{94:271}),{34:[1,273],38:[1,272]},o($VD1,[2,272]),o($V2,[2,279],{6:[2,281]}),o($V71,[2,284],{109:274,139:275,140:[1,276]}),o($V71,[2,51]),{13:$V8,16:$V9,60:277,312:$Vb},o($V71,[2,67]),o($V71,[2,313]),o($V71,[2,314]),o($V71,[2,315]),{116:[1,278]},o($VE1,[2,64]),{13:$V8,16:$V9,60:279,312:$Vb},o($Vf,[2,312]),{13:$V8,16:$V9,60:280,312:$Vb},o($VF1,[2,318],{145:281}),o($VF1,[2,317]),{13:$V8,16:$V9,34:$Vi1,35:$Vj1,39:215,60:220,87:$Vx,93:$Vk1,98:221,153:282,183:212,185:213,226:$Vl1,231:$Vz,243:214,244:219,245:$Vm1,246:$Vn1,263:146,265:147,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb},o($Va1,[2,301],{127:283}),o($Va1,[2,300]),o([45,132,135],[2,60]),o($Va1,[2,307],{131:284}),o($Va1,[2,306]),o([45,133,135],[2,59]),o($V5,[2,6]),o($VG1,[2,258],{65:285,77:286,78:[1,287]}),o($Vb1,[2,257]),{13:$V8,16:$V9,35:$Vw,60:293,72:291,73:292,76:288,82:290,84:289,274:133,275:$VC,276:$VD,277:$VE,279:$VF,280:138,281:$VG,282:$VH,283:141,284:$VI,285:$VJ,288:$VK,290:$VL,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21},o([6,48,68,75,78,86,88,90],[2,21]),o($Vq,$VH1,{25:19,30:294,155:295,18:296,22:297,156:298,162:299,163:300,28:$V3,46:$VI1,48:$VI1,90:$VI1,119:$VI1,167:$VI1,168:$VI1,170:$VI1,173:$VI1,174:$VI1}),{13:$V8,16:$V9,60:301,312:$Vb},o($Vf,[2,251]),o($V5,[2,7]),o($Vb1,$Vc1,{64:196,74:197,21:302,75:$Vd1}),o($Vf1,[2,255]),{69:[1,303]},o($Vf1,$Vg1,{63:204,67:205,24:304,68:$Vh1}),o($V6,[2,233]),o($Vq,$V81,{152:188,47:305,151:306,48:[2,236]}),o($V6,[2,92]),{48:[2,362],182:307,328:[1,308]},{13:$V8,16:$V9,34:$VJ1,60:313,184:309,188:310,193:311,195:$VK1,312:$Vb},o($VL1,[2,366],{188:310,193:311,60:313,186:315,187:316,184:317,13:$V8,16:$V9,34:$VJ1,195:$VK1,312:$Vb}),o($VM1,[2,364]),o($VM1,[2,365]),{13:$V8,16:$V9,34:$Vi1,35:$Vj1,39:323,60:220,87:$Vx,93:$Vk1,98:221,185:321,197:319,225:318,226:$Vl1,229:320,231:$Vz,243:322,244:219,245:$Vm1,246:$Vn1,263:146,265:147,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb},{13:$V8,16:$V9,34:$VJ1,60:313,184:324,188:310,193:311,195:$VK1,312:$Vb},o($VN1,[2,137]),o($VN1,[2,138]),o($VN1,[2,139]),o($VN1,[2,140]),o($VN1,[2,141]),o($VN1,[2,142]),o($VN1,[2,143]),o($Vf1,$Vg1,{63:204,67:205,24:325,68:$Vh1}),o($Vr,[2,245]),o($Vo1,[2,247]),o($V5,[2,19]),{34:[1,326]},{34:[1,327]},o([37,38,191,278],[2,144],{249:328,250:[1,329]}),{13:$V8,16:$V9,34:[1,331],60:332,232:330,312:$Vb},{13:$V8,16:$V9,34:$VJ1,60:313,193:333,195:$VK1,312:$Vb},o($VM1,[2,417]),o($VM1,[2,418]),o($Vp1,[2,146],{253:334,254:[1,335]}),{13:$V8,16:$V9,34:$Vv,35:$Vw,60:128,72:127,73:129,82:126,87:$Vx,98:130,219:$Vy,255:336,259:120,263:146,265:147,267:121,271:$VA,272:125,273:$VB,274:133,275:$VC,276:$VD,277:$VE,279:$VF,280:138,281:$VG,282:$VH,283:141,284:$VI,285:$VJ,288:$VK,290:$VL,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21},{258:[1,337]},o($VO1,[2,435]),o($VO1,[2,436]),o($VO1,[2,437]),o($VO1,[2,438]),o($VO1,[2,439]),o($VO1,[2,440]),{258:[2,442]},o([37,38,191,250,254,258,278,295,334,335,336,337,338,339],[2,151],{261:338,262:339,263:340,265:341,271:[1,342],273:[1,343],306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY}),o($Vr1,[2,155],{269:344,270:345,26:$VP1,331:$VQ1}),o($Vs1,[2,157]),o($Vs1,[2,158]),o($Vs1,[2,159]),o($Vv1,[2,88]),o($VO1,[2,352],{175:348,316:[1,349]}),{38:[1,350]},o($Vv1,[2,169]),{13:$V8,16:$V9,34:$Vv,35:$Vw,36:351,60:128,72:127,73:129,82:126,87:$Vx,98:130,219:$Vy,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:$VA,272:125,273:$VB,274:133,275:$VC,276:$VD,277:$VE,279:$VF,280:138,281:$VG,282:$VH,283:141,284:$VI,285:$VJ,288:$VK,290:$VL,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21},{13:$V8,16:$V9,34:$Vv,35:$Vw,36:352,60:128,72:127,73:129,82:126,87:$Vx,98:130,219:$Vy,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:$VA,272:125,273:$VB,274:133,275:$VC,276:$VD,277:$VE,279:$VF,280:138,281:$VG,282:$VH,283:141,284:$VI,285:$VJ,288:$VK,290:$VL,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21},{13:$V8,16:$V9,34:$Vv,35:$Vw,36:353,60:128,72:127,73:129,82:126,87:$Vx,98:130,219:$Vy,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:$VA,272:125,273:$VB,274:133,275:$VC,276:$VD,277:$VE,279:$VF,280:138,281:$VG,282:$VH,283:141,284:$VI,285:$VJ,288:$VK,290:$VL,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21},o($Vv1,[2,173]),o($Vv1,[2,90]),o($VO1,[2,356],{178:354}),{34:[1,355]},o($Vv1,[2,175]),{13:$V8,16:$V9,34:$Vv,35:$Vw,36:356,60:128,72:127,73:129,82:126,87:$Vx,98:130,219:$Vy,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:$VA,272:125,273:$VB,274:133,275:$VC,276:$VD,277:$VE,279:$VF,280:138,281:$VG,282:$VH,283:141,284:$VI,285:$VJ,288:$VK,290:$VL,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21},{46:$Ve1,62:357},o($Vy1,[2,183]),{13:$V8,16:$V9,60:358,312:$Vb},o($VR1,[2,462],{286:359,316:[1,360]}),o($VO1,[2,466],{289:361,316:[1,362]}),o($VO1,[2,468],{291:363,316:[1,364]}),{13:$V8,16:$V9,48:[1,365],60:367,87:$Vx,97:366,98:368,99:369,100:$VS1,231:$VT1,263:146,265:147,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb},{48:[1,372],93:[1,373]},{46:[1,374]},o($VD1,[2,273]),o($V71,[2,50]),o($V71,[2,285]),{119:[1,375]},o($V71,[2,66]),o($Vf,$V41,{142:183,115:376,119:$V51,141:$V61}),o($VE1,[2,65]),o($V71,[2,53]),{48:[1,377],119:[1,379],146:378},o($VF1,[2,330],{154:380,328:[1,381]}),{45:[1,382],134:383,135:$VU1},{45:[1,385],134:386,135:$VU1},o($VV1,[2,260],{66:387,85:388,86:[1,389],88:[1,390]}),o($VG1,[2,259]),{69:[1,391]},o($Vb1,[2,30],{274:133,280:138,283:141,82:290,72:291,73:292,60:293,84:392,13:$V8,16:$V9,35:$Vw,275:$VC,276:$VD,277:$VE,279:$VF,281:$VG,282:$VH,284:$VI,285:$VJ,288:$VK,290:$VL,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21}),o($VW1,[2,264]),o($VX1,[2,85]),o($VX1,[2,86]),o($VX1,[2,87]),{35:$Vt1,93:$Vu1},{48:[1,393]},{48:[1,394]},{20:395,45:$Vn,46:$Vo,61:98},{20:396,45:$Vn,46:$Vo,61:98},o($VY1,[2,334],{157:397}),o($VY1,[2,333]),{13:$V8,16:$V9,34:$Vi1,35:$VZ1,39:402,60:220,87:$Vx,93:$Vk1,98:221,164:398,201:399,203:400,226:$V_1,231:$Vz,243:401,244:219,245:$Vm1,246:$Vn1,263:146,265:147,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb},o($Vr,[2,20]),o($VV1,[2,22]),{13:$V8,16:$V9,34:$V$1,35:$V02,60:293,70:405,71:406,72:407,73:408,274:133,275:$VC,276:$VD,277:$VE,279:$VF,280:138,281:$VG,282:$VH,283:141,284:$VI,285:$VJ,288:$VK,290:$VL,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21},o($V5,[2,16]),{48:[1,411]},{48:[2,237]},{48:[2,93]},o($Vq,[2,361],{48:[2,363]}),o($VL1,[2,94]),o($V12,[2,368],{189:412}),o($Vq,[2,372],{194:413,196:414}),o($Vq,[2,100]),o($Vq,[2,101]),o($Vq,[2,102]),o($VL1,[2,95]),o($VL1,[2,96]),o($VL1,[2,367]),{13:$V8,16:$V9,34:$Vi1,35:$Vj1,38:[1,415],39:323,60:220,87:$Vx,93:$Vk1,98:221,185:321,197:416,226:$Vl1,229:320,231:$Vz,243:322,244:219,245:$Vm1,246:$Vn1,263:146,265:147,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb},o($V22,[2,403]),o($V32,[2,129]),o($V32,[2,130]),o($V32,[2,407]),o($V32,[2,408]),{227:[1,417]},o($V5,[2,18]),{38:[1,418]},{38:[1,419]},o($Vp1,[2,432]),{13:$V8,16:$V9,34:$Vv,35:$Vw,60:128,72:127,73:129,82:126,87:$Vx,98:130,219:$Vy,247:420,251:118,255:119,259:120,263:146,265:147,267:121,271:$VA,272:125,273:$VB,274:133,275:$VC,276:$VD,277:$VE,279:$VF,280:138,281:$VG,282:$VH,283:141,284:$VI,285:$VJ,288:$VK,290:$VL,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21},{46:[1,421]},{46:[2,411]},{46:[2,412]},{13:$V8,16:$V9,34:$Vi1,39:423,60:220,87:$Vx,93:$Vk1,98:221,231:$Vz,237:422,243:424,244:219,245:$Vm1,246:$Vn1,263:146,265:147,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb},o($Vq1,[2,434]),{13:$V8,16:$V9,34:$Vv,35:$Vw,60:128,72:127,73:129,82:126,87:$Vx,98:130,219:$Vy,251:425,255:119,259:120,263:146,265:147,267:121,271:$VA,272:125,273:$VB,274:133,275:$VC,276:$VD,277:$VE,279:$VF,280:138,281:$VG,282:$VH,283:141,284:$VI,285:$VJ,288:$VK,290:$VL,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21},o($Vq1,[2,149]),{35:$Vw1,93:$Vx1,177:426},o($Vr1,[2,444]),{13:$V8,16:$V9,34:$Vv,35:$Vw,60:128,72:127,73:129,82:126,87:$Vx,98:130,219:$Vy,259:427,263:146,265:147,267:121,271:$VA,272:125,273:$VB,274:133,275:$VC,276:$VD,277:$VE,279:$VF,280:138,281:$VG,282:$VH,283:141,284:$VI,285:$VJ,288:$VK,290:$VL,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21},o($Vs1,[2,447],{264:428}),o($Vs1,[2,449],{266:429}),o($VO1,[2,445]),o($VO1,[2,446]),o($Vs1,[2,452]),{13:$V8,16:$V9,34:$Vv,35:$Vw,60:128,72:127,73:129,82:126,87:$Vx,98:130,219:$Vy,263:146,265:147,267:430,271:$VA,272:125,273:$VB,274:133,275:$VC,276:$VD,277:$VE,279:$VF,280:138,281:$VG,282:$VH,283:141,284:$VI,285:$VJ,288:$VK,290:$VL,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21},o($VO1,[2,453]),o($VO1,[2,454]),o($VO1,[2,354],{176:431}),o($VO1,[2,353]),o([6,13,16,26,34,35,37,38,46,48,78,81,83,86,87,88,90,93,119,167,168,170,173,174,191,226,231,245,246,250,254,258,271,273,275,276,277,278,279,281,282,284,285,288,290,295,299,300,301,302,303,304,305,306,307,308,309,310,311,312,328,331,334,335,336,337,338,339,340,341,342,343,344],[2,167]),{38:[1,432]},{278:[1,433]},{278:[1,434]},{13:$V8,16:$V9,34:$Vv,35:$Vw,36:435,60:128,72:127,73:129,82:126,87:$Vx,98:130,219:$Vy,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:$VA,272:125,273:$VB,274:133,275:$VC,276:$VD,277:$VE,279:$VF,280:138,281:$VG,282:$VH,283:141,284:$VI,285:$VJ,288:$VK,290:$VL,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21},{38:[1,436]},{38:[1,437]},o($Vv1,[2,177]),o($Vy1,[2,184]),{13:$V8,16:$V9,26:[1,439],34:$Vv,35:$Vw,36:440,60:128,72:127,73:129,82:126,87:$Vx,98:130,219:$Vy,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:$VA,272:125,273:$VB,274:133,275:$VC,276:$VD,277:$VE,279:$VF,280:138,281:$VG,282:$VH,283:141,284:$VI,285:$VJ,287:438,288:$VK,290:$VL,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21},o($VR1,[2,463]),{13:$V8,16:$V9,34:$Vv,35:$Vw,36:441,60:128,72:127,73:129,82:126,87:$Vx,98:130,219:$Vy,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:$VA,272:125,273:$VB,274:133,275:$VC,276:$VD,277:$VE,279:$VF,280:138,281:$VG,282:$VH,283:141,284:$VI,285:$VJ,288:$VK,290:$VL,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21},o($VO1,[2,467]),{13:$V8,16:$V9,34:$Vv,35:$Vw,36:442,60:128,72:127,73:129,82:126,87:$Vx,98:130,219:$Vy,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:$VA,272:125,273:$VB,274:133,275:$VC,276:$VD,277:$VE,279:$VF,280:138,281:$VG,282:$VH,283:141,284:$VI,285:$VJ,288:$VK,290:$VL,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21},o($VO1,[2,469]),o($V31,[2,41]),o($VB1,[2,269]),o($V42,[2,44]),o($V42,[2,45]),o($V42,[2,46]),o($V42,[2,47]),{13:$V8,16:$V9,60:220,87:$Vx,93:$Vk1,98:221,99:445,119:[1,443],231:$VT1,241:444,244:446,245:$Vm1,246:$Vn1,263:146,265:147,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb},o($V31,[2,42]),o($VC1,[2,271]),o($V52,[2,274],{96:447}),{13:$V8,16:$V9,60:448,312:$Vb},o($V71,[2,52]),o([6,45,132,133,135,191],[2,68]),o($VF1,[2,319]),{13:$V8,16:$V9,34:[1,450],60:451,147:449,312:$Vb},o($VF1,[2,70]),o($Vq,[2,329],{48:$V62,119:$V62}),{46:$Ve1,62:452},o($Va1,[2,302]),o($Vf,[2,309],{136:453,320:[1,454]}),{46:$Ve1,62:455},o($Va1,[2,308]),o($VV1,[2,23]),o($VV1,[2,261]),{87:[1,456]},{87:[1,457]},{13:$V8,16:$V9,34:$V72,35:$Vw,60:293,72:291,73:292,79:458,80:459,81:$V82,82:290,83:$V92,84:462,274:133,275:$VC,276:$VD,277:$VE,279:$VF,280:138,281:$VG,282:$VH,283:141,284:$VI,285:$VJ,288:$VK,290:$VL,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21},o($VW1,[2,265]),o($Va2,[2,71]),o($Va2,[2,72]),o($Vb1,$Vc1,{64:196,74:197,21:464,75:$Vd1}),o($Vf1,$Vg1,{63:204,67:205,24:465,68:$Vh1}),{46:[2,344],48:[2,73],89:475,90:$V4,119:[1,471],158:466,159:467,166:468,167:[1,469],168:[1,470],170:[1,472],173:[1,473],174:[1,474]},o($VY1,[2,342],{165:476,328:[1,477]}),o($Vb2,$Vc2,{202:478,205:479,210:480,211:482,34:$Vd2}),o($Ve2,[2,378],{205:479,210:480,211:482,204:483,202:484,13:$Vc2,16:$Vc2,35:$Vc2,195:$Vc2,219:$Vc2,224:$Vc2,312:$Vc2,34:$Vd2}),o($Vf2,[2,376]),o($Vf2,[2,377]),{13:$V8,16:$V9,34:$Vi1,35:$VZ1,39:490,60:220,87:$Vx,93:$Vk1,98:221,200:486,203:488,226:$V_1,228:485,230:487,231:$Vz,243:489,244:219,245:$Vm1,246:$Vn1,263:146,265:147,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb},o($Vb2,$Vc2,{205:479,210:480,211:482,202:491,34:$Vd2}),o($Vf1,[2,24],{274:133,280:138,283:141,60:293,72:407,73:408,71:492,13:$V8,16:$V9,34:$V$1,35:$V02,275:$VC,276:$VD,277:$VE,279:$VF,281:$VG,282:$VH,284:$VI,285:$VJ,288:$VK,290:$VL,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21}),o($Vg2,[2,262]),o($Vg2,[2,25]),o($Vg2,[2,26]),{13:$V8,16:$V9,34:$Vv,35:$Vw,36:493,60:128,72:127,73:129,82:126,87:$Vx,98:130,219:$Vy,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:$VA,272:125,273:$VB,274:133,275:$VC,276:$VD,277:$VE,279:$VF,280:138,281:$VG,282:$VH,283:141,284:$VI,285:$VJ,288:$VK,290:$VL,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21},o($Vg2,[2,29]),o($Vf1,$Vg1,{63:204,67:205,24:494,68:$Vh1}),o([48,119,227,328],[2,97],{190:495,191:[1,496]}),o($V12,[2,99]),{13:$V8,16:$V9,34:$Vi1,35:$Vj1,39:323,60:220,87:$Vx,93:$Vk1,98:221,185:321,197:497,226:$Vl1,229:320,231:$Vz,243:322,244:219,245:$Vm1,246:$Vn1,263:146,265:147,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb},o($Vh2,[2,125]),o($V22,[2,404]),o($Vh2,[2,126]),o($Vu,[2,14]),o($Vu,[2,15]),o($Vp1,[2,145]),{13:$V8,16:$V9,34:$Vi1,39:499,60:220,87:$Vx,93:$Vk1,98:221,231:$Vz,233:498,243:500,244:219,245:$Vm1,246:$Vn1,263:146,265:147,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb},{235:[1,501]},{235:[2,419]},{235:[2,420]},o($Vq1,[2,147]),o($Vq1,[2,150]),o($Vr1,[2,152]),o($Vr1,[2,153],{270:345,269:502,26:$VP1,331:$VQ1}),o($Vr1,[2,154],{270:345,269:503,26:$VP1,331:$VQ1}),o($Vs1,[2,156]),{13:$V8,16:$V9,34:$Vv,35:$Vw,36:504,60:128,72:127,73:129,82:126,87:$Vx,98:130,219:$Vy,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:$VA,272:125,273:$VB,274:133,275:$VC,276:$VD,277:$VE,279:$VF,280:138,281:$VG,282:$VH,283:141,284:$VI,285:$VJ,288:$VK,290:$VL,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21},o($Vv1,[2,170]),{13:$V8,16:$V9,34:$Vv,35:$Vw,36:505,60:128,72:127,73:129,82:126,87:$Vx,98:130,219:$Vy,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:$VA,272:125,273:$VB,274:133,275:$VC,276:$VD,277:$VE,279:$VF,280:138,281:$VG,282:$VH,283:141,284:$VI,285:$VJ,288:$VK,290:$VL,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21},{13:$V8,16:$V9,34:$Vv,35:$Vw,36:506,60:128,72:127,73:129,82:126,87:$Vx,98:130,219:$Vy,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:$VA,272:125,273:$VB,274:133,275:$VC,276:$VD,277:$VE,279:$VF,280:138,281:$VG,282:$VH,283:141,284:$VI,285:$VJ,288:$VK,290:$VL,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21},{38:[1,507],278:[1,508]},o($Vv1,[2,174]),o($Vv1,[2,176]),{38:[1,509]},{38:[2,464]},{38:[2,465]},{38:[1,510]},{38:[2,470],191:[1,513],292:511,293:512},{13:$V8,16:$V9,34:[1,515],60:516,238:514,312:$Vb},{13:$V8,16:$V9,34:$VJ1,60:313,193:517,195:$VK1,312:$Vb},o($VM1,[2,427]),o($VM1,[2,428]),{35:[1,520],48:[1,518],101:519},o($V71,[2,63]),{46:[1,521]},{46:[2,320]},{46:[2,321]},o($V71,[2,57]),{13:$V8,16:$V9,60:522,312:$Vb},o($Vf,[2,310]),o($V71,[2,58]),o($VV1,[2,36],{88:[1,523]}),o($VV1,[2,37],{86:[1,524]}),o($VG1,[2,31],{274:133,280:138,283:141,82:290,72:291,73:292,60:293,84:462,80:525,13:$V8,16:$V9,34:$V72,35:$Vw,81:$V82,83:$V92,275:$VC,276:$VD,277:$VE,279:$VF,281:$VG,282:$VH,284:$VI,285:$VJ,288:$VK,290:$VL,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21}),o($Vi2,[2,266]),{35:$Vw,82:526},{35:$Vw,82:527},o($Vi2,[2,34]),o($Vi2,[2,35]),{31:528,48:[2,228],89:529,90:$V4},{32:530,48:[2,230],89:531,90:$V4},o($VY1,[2,335]),o($Vj2,[2,336],{160:532,328:[1,533]}),{46:$Ve1,62:534},{46:$Ve1,62:535},{46:$Ve1,62:536},{13:$V8,16:$V9,34:[1,538],60:539,169:537,312:$Vb},o($Vk2,[2,348],{171:540,321:[1,541]}),{13:$V8,16:$V9,35:$Vw,60:293,72:291,73:292,82:290,84:542,274:133,275:$VC,276:$VD,277:$VE,279:$VF,280:138,281:$VG,282:$VH,283:141,284:$VI,285:$VJ,288:$VK,290:$VL,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21},{35:[1,543]},o($Vl2,[2,84]),o($VY1,[2,75]),o($Vq,[2,341],{46:$Vm2,48:$Vm2,90:$Vm2,119:$Vm2,167:$Vm2,168:$Vm2,170:$Vm2,173:$Vm2,174:$Vm2}),o($Ve2,[2,105]),o($Vq,[2,382],{206:544}),o($Vq,[2,380]),o($Vq,[2,381]),o($Vb2,[2,390],{212:545,213:546}),o($Ve2,[2,106]),o($Ve2,[2,379]),{13:$V8,16:$V9,34:$Vi1,35:$VZ1,38:[1,547],39:490,60:220,87:$Vx,93:$Vk1,98:221,200:548,203:488,226:$V_1,230:487,231:$Vz,243:489,244:219,245:$Vm1,246:$Vn1,263:146,265:147,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb},o($V22,[2,405]),o($Vn2,[2,131]),o($Vn2,[2,132]),o($Vn2,[2,409]),o($Vn2,[2,410]),{227:[1,549]},o($Vg2,[2,263]),{37:[1,551],38:[1,550]},o($V5,[2,17]),o($V12,[2,369]),o($V12,[2,370],{193:311,60:313,192:552,188:553,13:$V8,16:$V9,34:$VJ1,195:$VK1,312:$Vb}),o($V12,[2,103],{278:[1,554]}),{13:$V8,16:$V9,34:$VJ1,60:313,193:555,195:$VK1,312:$Vb},o($VM1,[2,413]),o($VM1,[2,414]),o($Vo2,[2,134]),o($Vs1,[2,448]),o($Vs1,[2,450]),{38:[1,556],278:[1,557]},{38:[1,558]},{278:[1,559]},o($Vv1,[2,91]),o($VO1,[2,357]),o($Vv1,[2,178]),o($Vv1,[2,179]),{38:[1,560]},{38:[2,471]},{294:[1,561]},{46:[1,562]},{46:[2,421]},{46:[2,422]},{13:$V8,16:$V9,60:220,87:$Vx,93:$Vk1,98:221,99:564,231:$VT1,242:563,244:565,245:$Vm1,246:$Vn1,263:146,265:147,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb},o($V31,[2,43]),o($V52,[2,275]),{13:$V8,16:$V9,60:367,87:$Vx,97:567,98:368,99:369,100:$VS1,102:566,231:$VT1,263:146,265:147,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb},o($Vq,$V81,{152:188,148:568,151:569,48:[2,322]}),o($Va1,[2,61]),{87:[1,570]},{87:[1,571]},o($Vi2,[2,267]),o($Vi2,[2,32]),o($Vi2,[2,33]),{48:[2,11]},{48:[2,229]},{48:[2,12]},{48:[2,231]},o($Vq,$VH1,{163:300,161:572,162:573,46:$Vp2,48:$Vp2,90:$Vp2,119:$Vp2,167:$Vp2,168:$Vp2,170:$Vp2,173:$Vp2,174:$Vp2}),o($Vj2,[2,337]),o($Vl2,[2,76],{329:[1,574]}),o($Vl2,[2,77]),o($Vl2,[2,78]),{46:$Ve1,62:575},{46:[2,346]},{46:[2,347]},{13:$V8,16:$V9,34:[1,577],60:578,172:576,312:$Vb},o($Vk2,[2,349]),o($Vl2,[2,81]),{13:$V8,16:$V9,34:$Vv,35:$Vw,36:579,39:580,60:128,72:127,73:129,82:126,87:$Vx,98:130,219:$Vy,231:$Vz,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:$VA,272:125,273:$VB,274:133,275:$VC,276:$VD,277:$VE,279:$VF,280:138,281:$VG,282:$VH,283:141,284:$VI,285:$VJ,288:$VK,290:$VL,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21},{13:$V8,16:$V9,34:$Vi1,35:$VZ1,39:490,60:220,87:$Vx,93:$Vk1,98:221,200:581,203:488,226:$V_1,230:487,231:$Vz,243:489,244:219,245:$Vm1,246:$Vn1,263:146,265:147,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb},o($V22,[2,110],{330:[1,582]}),o($Vq2,[2,397],{214:583,218:584,224:[1,585]}),o($Vr2,[2,127]),o($V22,[2,406]),o($Vr2,[2,128]),o($Vg2,[2,27]),{34:[1,586]},o($V12,[2,98]),o($V12,[2,371]),o($Vq,[2,373]),{13:$V8,16:$V9,34:$Vi1,39:588,60:220,87:$Vx,93:$Vk1,98:221,231:$Vz,234:587,243:589,244:219,245:$Vm1,246:$Vn1,263:146,265:147,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb},o($Vv1,[2,89]),o($VO1,[2,355]),o($Vv1,[2,171]),{13:$V8,16:$V9,34:$Vv,35:$Vw,36:590,60:128,72:127,73:129,82:126,87:$Vx,98:130,219:$Vy,247:116,251:118,255:119,259:120,263:146,265:147,267:121,271:$VA,272:125,273:$VB,274:133,275:$VC,276:$VD,277:$VE,279:$VF,280:138,281:$VG,282:$VH,283:141,284:$VI,285:$VJ,288:$VK,290:$VL,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb,339:$VZ,340:$V_,341:$V$,342:$V01,343:$V11,344:$V21},o($Vv1,[2,180]),{295:[1,591]},{13:$V8,16:$V9,60:220,87:$Vx,93:$Vk1,98:221,99:593,231:$VT1,239:592,244:594,245:$Vm1,246:$Vn1,263:146,265:147,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb},{235:[1,595]},{235:[2,429]},{235:[2,430]},{13:$V8,16:$V9,38:[1,596],60:367,87:$Vx,97:597,98:368,99:369,100:$VS1,231:$VT1,263:146,265:147,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb},o($Vs2,[2,276]),{48:[1,598]},{48:[2,323]},o($VV1,[2,38]),o($VV1,[2,39]),o($VY1,[2,74]),o($VY1,[2,339]),{46:[2,345]},o($Vl2,[2,79]),{46:$Ve1,62:599},{46:[2,350]},{46:[2,351]},{37:[1,600]},{37:[1,601]},o($Vt2,[2,384],{207:602,278:[1,603]}),o($Vb2,[2,389]),o([13,16,34,35,38,87,93,226,231,245,246,299,300,301,302,303,304,305,306,307,308,309,310,311,312,330],[2,111],{331:[1,604]}),{13:$V8,16:$V9,35:[1,610],60:607,195:[1,608],215:605,216:606,219:[1,609],312:$Vb},o($Vq2,[2,398]),{38:[1,611]},{48:[1,612]},{48:[2,415]},{48:[2,416]},{38:[1,613]},{296:614,302:$VP,303:$VQ,304:$VR,305:$VS},{13:$V8,16:$V9,34:$VJ1,60:313,193:615,195:$VK1,312:$Vb},o($VM1,[2,423]),o($VM1,[2,424]),o($Vu2,[2,136]),o($V52,[2,48]),o($Vs2,[2,277]),o($Vv2,[2,324],{149:616,328:[1,617]}),o($Vl2,[2,80]),{34:[1,618]},{34:[1,619]},o([46,48,90,119,167,168,170,173,174,227,328],[2,107],{208:620,191:[1,621]}),o($Vq,[2,383]),o($Vb2,[2,391]),o($Vw2,[2,113]),o($Vw2,[2,395],{217:622,332:623,26:[1,625],271:[1,626],333:[1,624]}),o($Vx2,[2,114]),o($Vx2,[2,115]),{13:$V8,16:$V9,35:[1,630],60:631,93:[1,629],195:$Vy2,220:627,221:628,224:$Vz2,312:$Vb},o($Vb2,$Vc2,{211:482,210:634}),o($Vg2,[2,28]),{235:[1,635]},o($Vv1,[2,172]),{38:[2,181]},{13:$V8,16:$V9,60:220,87:$Vx,93:$Vk1,98:221,99:637,231:$VT1,240:636,244:638,245:$Vm1,246:$Vn1,263:146,265:147,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb},o($Vq,$V81,{152:188,150:639,151:640,48:$VA2,119:$VA2}),o($Vv2,[2,325]),{38:[1,641]},{38:[1,642]},o($Vt2,[2,385]),o($Vt2,[2,108],{211:482,209:643,210:644,13:$Vc2,16:$Vc2,35:$Vc2,195:$Vc2,219:$Vc2,224:$Vc2,312:$Vc2,34:[1,645]}),o($Vw2,[2,112]),o($Vw2,[2,396]),o($Vw2,[2,392]),o($Vw2,[2,393]),o($Vw2,[2,394]),o($Vx2,[2,116]),o($Vx2,[2,118]),o($Vx2,[2,119]),o($VB2,[2,399],{222:646}),o($Vx2,[2,121]),o($Vx2,[2,122]),{13:$V8,16:$V9,60:647,195:[1,648],312:$Vb},{38:[1,649]},o($Vo2,[2,133]),{48:[1,650]},{48:[2,425]},{48:[2,426]},o($VF1,[2,69]),o($VF1,[2,327]),o($Vl2,[2,82]),o($Vl2,[2,83]),o($Vq,[2,374],{198:651,199:652}),o($Vq,[2,386]),o($Vq,[2,387]),{13:$V8,16:$V9,38:[2,401],60:631,195:$Vy2,221:654,223:653,224:$Vz2,312:$Vb},o($Vx2,[2,123]),o($Vx2,[2,124]),o($Vx2,[2,117]),{235:[1,655]},o($Vt2,[2,109]),{13:$V8,16:$V9,34:$Vi1,35:$VZ1,39:490,60:220,87:$Vx,93:$Vk1,98:221,200:656,203:488,226:$V_1,230:487,231:$Vz,243:489,244:219,245:$Vm1,246:$Vn1,263:146,265:147,296:142,299:$VM,300:$VN,301:$VO,302:$VP,303:$VQ,304:$VR,305:$VS,306:$VT,307:$VU,308:$VV,309:$VW,310:$VX,311:$VY,312:$Vb},{38:[1,657]},{38:[2,402],330:[1,658]},o($Vu2,[2,135]),o($Vt2,[2,104],{278:[1,659]}),o($Vx2,[2,120]),o($VB2,[2,400]),o($Vq,[2,375])],
defaultActions: {5:[2,206],6:[2,207],8:[2,205],26:[2,1],27:[2,3],28:[2,217],77:[2,49],86:[2,296],100:[2,253],107:[2,359],157:[2,461],245:[2,442],306:[2,237],307:[2,93],331:[2,411],332:[2,412],423:[2,419],424:[2,420],439:[2,464],440:[2,465],450:[2,320],451:[2,321],512:[2,471],515:[2,421],516:[2,422],528:[2,11],529:[2,229],530:[2,12],531:[2,231],538:[2,346],539:[2,347],564:[2,429],565:[2,430],569:[2,323],574:[2,345],577:[2,350],578:[2,351],588:[2,415],589:[2,416],614:[2,181],637:[2,425],638:[2,426]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  /*
    SPARQL parser in the Jison parser generator format.
  */

  var Wildcard = require('./Wildcard').Wildcard;

  // Common namespaces and entities
  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean';

  var base = '', basePath = '', baseRoot = '';

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() {
    var union = [];
    for (var i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // Resolves an IRI against a base path
  function resolveIRI(iri) {
    // Strip off possible angular brackets
    if (iri[0] === '<')
      iri = iri.substring(1, iri.length - 1);
    // Return absolute IRIs unmodified
    if (/^[a-z]+:/i.test(iri))
      return iri;
    if (!Parser.base)
      throw new Error('Cannot resolve relative IRI ' + iri + ' because no base IRI was set.');
    if (base !== Parser.base) {
      base = Parser.base;
      basePath = base.replace(/[^\/:]*$/, '');
      baseRoot = base.match(/^(?:[a-z]+:\/*)?[^\/]*/)[0];
    }
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined:
      return base;
    // Resolve relative fragment IRIs against the base IRI
    case '#':
      return base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?':
      return base.replace(/(?:\?.*)?$/, iri);
    // Resolve root relative IRIs at the root of the base IRI
    case '/':
      return baseRoot + iri;
    // Resolve all other IRIs at the base IRI's path
    default:
      return basePath + iri;
    }
  }

  // If the item is a variable, ensures it starts with a question mark
  function toVar(variable) {
    if (variable) {
      var first = variable[0];
      if (first === '?' || first === '$') return Parser.factory.variable(variable.substr(1));
    }
    return variable;
  }

  // Creates an operation with the given name and arguments
  function operation(operatorName, args) {
    return { type: 'operation', operator: operatorName, args: args || [] };
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    var expression = { expression: expr === '*'? new Wildcard() : expr };
    if (attr)
      for (var a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Transforms a list of operations types and arguments into a tree of operations
  function createOperationTree(initialExpression, operationList) {
    for (var i = 0, l = operationList.length, item; i < l && (item = operationList[i]); i++)
      initialExpression = operation(item[0], [initialExpression, item[1]]);
    return initialExpression;
  }

  // Group datasets by default and named
  function groupDatasets(fromClauses, groupName) {
    var defaults = [], named = [], l = fromClauses.length, fromClause, group = {};
    if (!l)
      return null;
    for (var i = 0; i < l && (fromClause = fromClauses[i]); i++)
      (fromClause.named ? named : defaults).push(fromClause.iri);
    group[groupName || 'from'] = { default: defaults, named: named };
    return group;
  }

  // Converts the string to a number
  function toInt(string) {
    return parseInt(string, 10);
  }

  // Transforms a possibly single group into its patterns
  function degroupSingle(group) {
    return group.type === 'group' && group.patterns.length === 1 ? group.patterns[0] : group;
  }

  // Creates a literal with the given value and type
  function createTypedLiteral(value, type) {
    if (type && type.termType !== 'NamedNode'){
      type = Parser.factory.namedNode(type);
    }
    return Parser.factory.literal(value, type);
  }

  // Creates a literal with the given value and language
  function createLangLiteral(value, lang) {
    return Parser.factory.literal(value, lang);
  }

  // Creates a triple with the given subject, predicate, and object
  function triple(subject, predicate, object) {
    var triple = {};
    if (subject   != null) triple.subject   = subject;
    if (predicate != null) triple.predicate = predicate;
    if (object    != null) triple.object    = object;
    return triple;
  }

  // Creates a new blank node
  function blank(name) {
    if (typeof name === 'string') {  // Only use name if a name is given
      if (name.startsWith('e_')) return Parser.factory.blankNode(name);
      return Parser.factory.blankNode('e_' + name);
    }
    return Parser.factory.blankNode('g_' + blankId++);
  };
  var blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }

  // Regular expression and replacement strings to escape strings
  var escapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g,
      escapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                             't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      partialSurrogatesWithoutEndpoint = /[\uD800-\uDBFF]([^\uDC00-\uDFFF]|$)/,
      fromCharCode = String.fromCharCode;

  // Translates escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    try {
      string = string.replace(escapeSequence, function (sequence, unicode4, unicode8, escapedChar) {
        var charCode;
        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          return fromCharCode(charCode);
        }
        else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          if (charCode < 0xFFFF) return fromCharCode(charCode);
          return fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
        }
        else {
          var replacement = escapeReplacements[escapedChar];
          if (!replacement) throw new Error();
          return replacement;
        }
      });
    }
    catch (error) { return ''; }

    // Test for invalid unicode surrogate pairs
    if (partialSurrogatesWithoutEndpoint.exec(string)) {
      throw new Error('Invalid unicode codepoint of surrogate pair without corresponding codepoint in ' + string);
    }

    return string;
  }

  // Creates a list, collecting its (possibly blank) items and triples associated with those items
  function createList(objects) {
    var list = blank(), head = list, listItems = [], listTriples, triples = [];
    objects.forEach(function (o) { listItems.push(o.entity); appendAllTo(triples, o.triples); });

    // Build an RDF list out of the items
    for (var i = 0, j = 0, l = listItems.length, listTriples = Array(l * 2); i < l;)
      listTriples[j++] = triple(head, Parser.factory.namedNode(RDF_FIRST), listItems[i]),
      listTriples[j++] = triple(head, Parser.factory.namedNode(RDF_REST),  head = ++i < l ? blank() : Parser.factory.namedNode(RDF_NIL));

    // Return the list's identifier, its triples, and the triples associated with its items
    return { entity: list, triples: appendAllTo(listTriples, triples) };
  }

  // Creates a blank node identifier, collecting triples with that blank node as subject
  function createAnonymousObject(propertyList) {
    var entity = blank();
    return {
      entity: entity,
      triples: propertyList.map(function (t) { return extend(triple(entity), t); })
    };
  }

  // Collects all (possibly blank) objects, and triples that have them as subject
  function objectListToTriples(predicate, objectList, otherTriples) {
    var objects = [], triples = [];
    objectList.forEach(function (l) {
      objects.push(triple(null, predicate, l.entity));
      appendAllTo(triples, l.triples);
    });
    return unionAll(objects, otherTriples || [], triples);
  }

  // Simplifies groups by merging adjacent BGPs
  function mergeAdjacentBGPs(groups) {
    var merged = [], currentBgp;
    for (var i = 0, group; group = groups[i]; i++) {
      switch (group.type) {
        // Add a BGP's triples to the current BGP
        case 'bgp':
          if (group.triples.length) {
            if (!currentBgp)
              appendTo(merged, currentBgp = group);
            else
              appendAllTo(currentBgp.triples, group.triples);
          }
          break;
        // All other groups break up a BGP
        default:
          // Only add the group if its pattern is non-empty
          if (!group.patterns || group.patterns.length > 0) {
            appendTo(merged, group);
            currentBgp = null;
          }
      }
    }
    return merged;
  }

  // Return the id of an expression
  function getExpressionId(expression) {
    return expression.variable ? expression.variable.value : expression.value || expression.expression.value;
  }

  // Get all "aggregate"'s from an expression
  function getAggregatesOfExpression(expression) {
    if (!expression) {
      return [];
    }
    if (expression.type === 'aggregate') {
      return [expression];
    } else if (expression.type === "operation") {
      const aggregates = [];
      for (const arg of expression.args) {
        aggregates.push(...getAggregatesOfExpression(arg));
      }
      return aggregates;
    }
    return [];
  }

  // Get all variables used in an expression
  function getVariablesFromExpression(expression) {
    const variables = new Set();
    const visitExpression = function (expr) {
      if (!expr) { return; }
      if (expr.termType === "Variable") {
        variables.add(expr);
      } else if (expr.type === "operation") {
        expr.args.forEach(visitExpression);
      }
    };
    visitExpression(expression);
    return variables;
  }

  // Helper function to flatten arrays
  function flatten(input, depth = 1, stack = []) {
    for (const item of input) {
        if (depth > 0 && item instanceof Array) {
          flatten(item, depth - 1, stack);
        } else {
          stack.push(item);
        }
    }
    return stack;
  }

  function isVariable(term) {
    return term.termType === 'Variable';
  }

  function getBoundVarsFromGroupGraphPattern(pattern) {
    if (pattern.triples) {
      const boundVars = [];
      for (const triple of pattern.triples) {
        if (isVariable(triple.subject)) boundVars.push(triple.subject.value);
        if (isVariable(triple.predicate)) boundVars.push(triple.predicate.value);
        if (isVariable(triple.object)) boundVars.push(triple.object.value);
      }
      return boundVars;
    } else if (pattern.patterns) {
      const boundVars = [];
      for (const pat of pattern.patterns) {
        boundVars.push(...getBoundVarsFromGroupGraphPattern(pat));
      }
      return boundVars;
    }
    return [];
  }

  // Helper function to find duplicates in array
  function getDuplicatesInArray(array) {
    const sortedArray = array.slice().sort();
    const duplicates = [];
    for (let i = 0; i < sortedArray.length - 1; i++) {
      if (sortedArray[i + 1] == sortedArray[i]) {
        duplicates.push(sortedArray[i]);
      }
    }
    return duplicates;
  }

  function ensureSparqlStar(value) {
    if (!Parser.sparqlStar) {
      throw new Error('SPARQL* support is not enabled');
    }
    return value;
  }

  function ensureNoVariables(operations) {
    for (const operation of operations) {
      if (operation.type === 'graph' && operation.name.termType === 'Variable') {
        throw new Error('Detected illegal variable in GRAPH');
      }
      if (operation.type === 'bgp' || operation.type === 'graph') {
        for (const triple of operation.triples) {
          if (triple.subject.termType === 'Variable' ||
              triple.predicate.termType === 'Variable' ||
              triple.object.termType === 'Variable') {
            throw new Error('Detected illegal variable in BGP');
          }
        }
      }
    }
    return operations;
  }

  function ensureNoBnodes(operations) {
    for (const operation of operations) {
      if (operation.type === 'bgp') {
        for (const triple of operation.triples) {
          if (triple.subject.termType === 'BlankNode' ||
              triple.predicate.termType === 'BlankNode' ||
              triple.object.termType === 'BlankNode') {
            throw new Error('Detected illegal blank node in BGP');
          }
        }
      }
    }
    return operations;
  }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore */
break;
case 1:return 12
break;
case 2:return 15
break;
case 3:return 28
break;
case 4:return 316
break;
case 5:return 317
break;
case 6:return 35
break;
case 7:return 37
break;
case 8:return 38
break;
case 9:return 26
break;
case 10:return 41
break;
case 11:return 45
break;
case 12:return 46
break;
case 13:return 48
break;
case 14:return 50
break;
case 15:return 55
break;
case 16:return 58
break;
case 17:return 320
break;
case 18:return 68
break;
case 19:return 69
break;
case 20:return 75
break;
case 21:return 78
break;
case 22:return 81
break;
case 23:return 83
break;
case 24:return 86
break;
case 25:return 88
break;
case 26:return 90
break;
case 27:return 191
break;
case 28:return 107
break;
case 29:return 321
break;
case 30:return 140
break;
case 31:return 322
break;
case 32:return 323
break;
case 33:return 117
break;
case 34:return 324
break;
case 35:return 116
break;
case 36:return 325
break;
case 37:return 326
break;
case 38:return 120
break;
case 39:return 122
break;
case 40:return 123
break;
case 41:return 138
break;
case 42:return 132
break;
case 43:return 133
break;
case 44:return 135
break;
case 45:return 141
break;
case 46:return 119
break;
case 47:return 327
break;
case 48:return 328
break;
case 49:return 167
break;
case 50:return 170
break;
case 51:return 174
break;
case 52:return 100
break;
case 53:return 168
break;
case 54:return 329
break;
case 55:return 173
break;
case 56:return 231
break;
case 57:return 235
break;
case 58:return 278
break;
case 59:return 195
break;
case 60:return 330
break;
case 61:return 331
break;
case 62:return 224
break;
case 63:return 333
break;
case 64:return 271
break;
case 65:return 219
break;
case 66:return 226
break;
case 67:return 227
break;
case 68:return 250
break;
case 69:return 254
break;
case 70:return 295
break;
case 71:return 334
break;
case 72:return 335
break;
case 73:return 336
break;
case 74:return 337
break;
case 75:return 338
break;
case 76:return 258
break;
case 77:return 339
break;
case 78:return 273
break;
case 79:return 281
break;
case 80:return 282
break;
case 81:return 275
break;
case 82:return 276
break;
case 83:return 277
break;
case 84:return 340
break;
case 85:return 341
break;
case 86:return 279
break;
case 87:return 343
break;
case 88:return 342
break;
case 89:return 344
break;
case 90:return 284
break;
case 91:return 285
break;
case 92:return 288
break;
case 93:return 290
break;
case 94:return 294
break;
case 95:return 298
break;
case 96:return 301
break;
case 97:return 13
break;
case 98:return 16
break;
case 99:return 312
break;
case 100:return 245
break;
case 101:return 34
break;
case 102:return 297
break;
case 103:return 87
break;
case 104:return 299
break;
case 105:return 300
break;
case 106:return 306
break;
case 107:return 307
break;
case 108:return 308
break;
case 109:return 309
break;
case 110:return 310
break;
case 111:return 311
break;
case 112:return 'EXPONENT'
break;
case 113:return 302
break;
case 114:return 303
break;
case 115:return 304
break;
case 116:return 305
break;
case 117:return 93
break;
case 118:return 246
break;
case 119:return 6
break;
case 120:return 'INVALID'
break;
case 121:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+|(#[^\n\r]*))/i,/^(?:BASE)/i,/^(?:PREFIX)/i,/^(?:SELECT)/i,/^(?:DISTINCT)/i,/^(?:REDUCED)/i,/^(?:\()/i,/^(?:AS)/i,/^(?:\))/i,/^(?:\*)/i,/^(?:CONSTRUCT)/i,/^(?:WHERE)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:DESCRIBE)/i,/^(?:ASK)/i,/^(?:FROM)/i,/^(?:NAMED)/i,/^(?:GROUP)/i,/^(?:BY)/i,/^(?:HAVING)/i,/^(?:ORDER)/i,/^(?:ASC)/i,/^(?:DESC)/i,/^(?:LIMIT)/i,/^(?:OFFSET)/i,/^(?:VALUES)/i,/^(?:;)/i,/^(?:LOAD)/i,/^(?:SILENT)/i,/^(?:INTO)/i,/^(?:CLEAR)/i,/^(?:DROP)/i,/^(?:CREATE)/i,/^(?:ADD)/i,/^(?:TO)/i,/^(?:MOVE)/i,/^(?:COPY)/i,/^(?:INSERT((\s+|(#[^\n\r]*)\n\r?)+)DATA)/i,/^(?:DELETE((\s+|(#[^\n\r]*)\n\r?)+)DATA)/i,/^(?:DELETE((\s+|(#[^\n\r]*)\n\r?)+)WHERE)/i,/^(?:WITH)/i,/^(?:DELETE)/i,/^(?:INSERT)/i,/^(?:USING)/i,/^(?:DEFAULT)/i,/^(?:GRAPH)/i,/^(?:ALL)/i,/^(?:\.)/i,/^(?:OPTIONAL)/i,/^(?:SERVICE)/i,/^(?:BIND)/i,/^(?:UNDEF)/i,/^(?:MINUS)/i,/^(?:UNION)/i,/^(?:FILTER)/i,/^(?:<<)/i,/^(?:>>)/i,/^(?:,)/i,/^(?:a)/i,/^(?:\|)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:\?)/i,/^(?:\+)/i,/^(?:!)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:IN)/i,/^(?:NOT)/i,/^(?:-)/i,/^(?:BOUND)/i,/^(?:BNODE)/i,/^(?:(RAND|NOW|UUID|STRUUID))/i,/^(?:(LANG|DATATYPE|IRI|URI|ABS|CEIL|FLOOR|ROUND|STRLEN|STR|UCASE|LCASE|ENCODE_FOR_URI|YEAR|MONTH|DAY|HOURS|MINUTES|SECONDS|TIMEZONE|TZ|MD5|SHA1|SHA256|SHA384|SHA512|isIRI|isURI|isBLANK|isLITERAL|isNUMERIC))/i,/^(?:(LANGMATCHES|CONTAINS|STRSTARTS|STRENDS|STRBEFORE|STRAFTER|STRLANG|STRDT|sameTerm))/i,/^(?:CONCAT)/i,/^(?:COALESCE)/i,/^(?:IF)/i,/^(?:REGEX)/i,/^(?:SUBSTR)/i,/^(?:REPLACE)/i,/^(?:EXISTS)/i,/^(?:COUNT)/i,/^(?:SUM|MIN|MAX|AVG|SAMPLE)/i,/^(?:GROUP_CONCAT)/i,/^(?:SEPARATOR)/i,/^(?:\^\^)/i,/^(?:true|false)/i,/^(?:(<(?:[^<>\"\{\}\|\^`\\\u0000-\u0020])*>))/i,/^(?:((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])(?:(?:(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])|\.)*(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040]))?)?:))/i,/^(?:(((([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])(?:(?:(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])|\.)*(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040]))?)?:)((?:((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|:|[0-9]|((%([0-9A-Fa-f])([0-9A-Fa-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))(?:(?:(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])|\.|:|((%([0-9A-Fa-f])([0-9A-Fa-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(?:(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])|:|((%([0-9A-Fa-f])([0-9A-Fa-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/i,/^(?:(_:(?:((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9])(?:(?:(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])|\.)*(((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040]))?))/i,/^(?:([\?\$]((?:((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9])(?:((?:([A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9]|\u00B7|[\u0300-\u036F\u203F-\u2040])*)))/i,/^(?:(@[a-zA-Z]+(?:-[a-zA-Z0-9]+)*))/i,/^(?:([0-9]+))/i,/^(?:([0-9]*\.[0-9]+))/i,/^(?:([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+)))/i,/^(?:(\+([0-9]+)))/i,/^(?:(\+([0-9]*\.[0-9]+)))/i,/^(?:(\+([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+))))/i,/^(?:(-([0-9]+)))/i,/^(?:(-([0-9]*\.[0-9]+)))/i,/^(?:(-([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+))))/i,/^(?:([eE][+-]?[0-9]+))/i,/^(?:('(?:(?:[^\u0027\u005C\u000A\u000D])|(\\[tbnrf\\\"']|\\u([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])|\\U([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])))*'))/i,/^(?:("(?:(?:[^\u0022\u005C\u000A\u000D])|(\\[tbnrf\\\"']|\\u([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])|\\U([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])))*"))/i,/^(?:('''(?:(?:'|'')?(?:[^'\\]|(\\[tbnrf\\\"']|\\u([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])|\\U([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f]))))*'''))/i,/^(?:("""(?:(?:"|"")?(?:[^\"\\]|(\\[tbnrf\\\"']|\\u([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])|\\U([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f])([0-9A-Fa-f]))))*"""))/i,/^(?:(\((\u0020|\u0009|\u000D|\u000A)*\)))/i,/^(?:(\[(\u0020|\u0009|\u000D|\u000A)*\]))/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = SparqlParser;
exports.Parser = SparqlParser.Parser;
exports.parse = function () { return SparqlParser.parse.apply(SparqlParser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}